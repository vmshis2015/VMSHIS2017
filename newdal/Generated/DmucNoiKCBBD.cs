using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VNS.HIS.DAL
{
	/// <summary>
	/// Strongly-typed collection for the DmucNoiKCBBD class.
	/// </summary>
    [Serializable]
	public partial class DmucNoiKCBBDCollection : ActiveList<DmucNoiKCBBD, DmucNoiKCBBDCollection>
	{	   
		public DmucNoiKCBBDCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DmucNoiKCBBDCollection</returns>
		public DmucNoiKCBBDCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                DmucNoiKCBBD o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the dmuc_noiKCBBD table.
	/// </summary>
	[Serializable]
	public partial class DmucNoiKCBBD : ActiveRecord<DmucNoiKCBBD>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public DmucNoiKCBBD()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public DmucNoiKCBBD(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public DmucNoiKCBBD(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public DmucNoiKCBBD(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("dmuc_noiKCBBD", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarIdKcbbd = new TableSchema.TableColumn(schema);
				colvarIdKcbbd.ColumnName = "id_kcbbd";
				colvarIdKcbbd.DataType = DbType.Int32;
				colvarIdKcbbd.MaxLength = 0;
				colvarIdKcbbd.AutoIncrement = true;
				colvarIdKcbbd.IsNullable = false;
				colvarIdKcbbd.IsPrimaryKey = true;
				colvarIdKcbbd.IsForeignKey = false;
				colvarIdKcbbd.IsReadOnly = false;
				colvarIdKcbbd.DefaultSetting = @"";
				colvarIdKcbbd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdKcbbd);
				
				TableSchema.TableColumn colvarMaDiachinh = new TableSchema.TableColumn(schema);
				colvarMaDiachinh.ColumnName = "ma_diachinh";
				colvarMaDiachinh.DataType = DbType.AnsiString;
				colvarMaDiachinh.MaxLength = 10;
				colvarMaDiachinh.AutoIncrement = false;
				colvarMaDiachinh.IsNullable = true;
				colvarMaDiachinh.IsPrimaryKey = false;
				colvarMaDiachinh.IsForeignKey = false;
				colvarMaDiachinh.IsReadOnly = false;
				colvarMaDiachinh.DefaultSetting = @"";
				colvarMaDiachinh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaDiachinh);
				
				TableSchema.TableColumn colvarMaKcbbd = new TableSchema.TableColumn(schema);
				colvarMaKcbbd.ColumnName = "ma_kcbbd";
				colvarMaKcbbd.DataType = DbType.AnsiString;
				colvarMaKcbbd.MaxLength = 5;
				colvarMaKcbbd.AutoIncrement = false;
				colvarMaKcbbd.IsNullable = false;
				colvarMaKcbbd.IsPrimaryKey = false;
				colvarMaKcbbd.IsForeignKey = false;
				colvarMaKcbbd.IsReadOnly = false;
				colvarMaKcbbd.DefaultSetting = @"";
				colvarMaKcbbd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaKcbbd);
				
				TableSchema.TableColumn colvarTenKcbbd = new TableSchema.TableColumn(schema);
				colvarTenKcbbd.ColumnName = "ten_kcbbd";
				colvarTenKcbbd.DataType = DbType.String;
				colvarTenKcbbd.MaxLength = 254;
				colvarTenKcbbd.AutoIncrement = false;
				colvarTenKcbbd.IsNullable = false;
				colvarTenKcbbd.IsPrimaryKey = false;
				colvarTenKcbbd.IsForeignKey = false;
				colvarTenKcbbd.IsReadOnly = false;
				colvarTenKcbbd.DefaultSetting = @"";
				colvarTenKcbbd.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenKcbbd);
				
				TableSchema.TableColumn colvarSttHthi = new TableSchema.TableColumn(schema);
				colvarSttHthi.ColumnName = "stt_hthi";
				colvarSttHthi.DataType = DbType.Int16;
				colvarSttHthi.MaxLength = 0;
				colvarSttHthi.AutoIncrement = false;
				colvarSttHthi.IsNullable = true;
				colvarSttHthi.IsPrimaryKey = false;
				colvarSttHthi.IsForeignKey = false;
				colvarSttHthi.IsReadOnly = false;
				colvarSttHthi.DefaultSetting = @"";
				colvarSttHthi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSttHthi);
				
				TableSchema.TableColumn colvarMotaThem = new TableSchema.TableColumn(schema);
				colvarMotaThem.ColumnName = "mota_them";
				colvarMotaThem.DataType = DbType.String;
				colvarMotaThem.MaxLength = 200;
				colvarMotaThem.AutoIncrement = false;
				colvarMotaThem.IsNullable = true;
				colvarMotaThem.IsPrimaryKey = false;
				colvarMotaThem.IsForeignKey = false;
				colvarMotaThem.IsReadOnly = false;
				colvarMotaThem.DefaultSetting = @"";
				colvarMotaThem.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMotaThem);
				
				TableSchema.TableColumn colvarDiaChi = new TableSchema.TableColumn(schema);
				colvarDiaChi.ColumnName = "dia_chi";
				colvarDiaChi.DataType = DbType.String;
				colvarDiaChi.MaxLength = 254;
				colvarDiaChi.AutoIncrement = false;
				colvarDiaChi.IsNullable = true;
				colvarDiaChi.IsPrimaryKey = false;
				colvarDiaChi.IsForeignKey = false;
				colvarDiaChi.IsReadOnly = false;
				colvarDiaChi.DefaultSetting = @"";
				colvarDiaChi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDiaChi);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("dmuc_noiKCBBD",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("IdKcbbd")]
		[Bindable(true)]
		public int IdKcbbd 
		{
			get { return GetColumnValue<int>(Columns.IdKcbbd); }
			set { SetColumnValue(Columns.IdKcbbd, value); }
		}
		  
		[XmlAttribute("MaDiachinh")]
		[Bindable(true)]
		public string MaDiachinh 
		{
			get { return GetColumnValue<string>(Columns.MaDiachinh); }
			set { SetColumnValue(Columns.MaDiachinh, value); }
		}
		  
		[XmlAttribute("MaKcbbd")]
		[Bindable(true)]
		public string MaKcbbd 
		{
			get { return GetColumnValue<string>(Columns.MaKcbbd); }
			set { SetColumnValue(Columns.MaKcbbd, value); }
		}
		  
		[XmlAttribute("TenKcbbd")]
		[Bindable(true)]
		public string TenKcbbd 
		{
			get { return GetColumnValue<string>(Columns.TenKcbbd); }
			set { SetColumnValue(Columns.TenKcbbd, value); }
		}
		  
		[XmlAttribute("SttHthi")]
		[Bindable(true)]
		public short? SttHthi 
		{
			get { return GetColumnValue<short?>(Columns.SttHthi); }
			set { SetColumnValue(Columns.SttHthi, value); }
		}
		  
		[XmlAttribute("MotaThem")]
		[Bindable(true)]
		public string MotaThem 
		{
			get { return GetColumnValue<string>(Columns.MotaThem); }
			set { SetColumnValue(Columns.MotaThem, value); }
		}
		  
		[XmlAttribute("DiaChi")]
		[Bindable(true)]
		public string DiaChi 
		{
			get { return GetColumnValue<string>(Columns.DiaChi); }
			set { SetColumnValue(Columns.DiaChi, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varMaDiachinh,string varMaKcbbd,string varTenKcbbd,short? varSttHthi,string varMotaThem,string varDiaChi)
		{
			DmucNoiKCBBD item = new DmucNoiKCBBD();
			
			item.MaDiachinh = varMaDiachinh;
			
			item.MaKcbbd = varMaKcbbd;
			
			item.TenKcbbd = varTenKcbbd;
			
			item.SttHthi = varSttHthi;
			
			item.MotaThem = varMotaThem;
			
			item.DiaChi = varDiaChi;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varIdKcbbd,string varMaDiachinh,string varMaKcbbd,string varTenKcbbd,short? varSttHthi,string varMotaThem,string varDiaChi)
		{
			DmucNoiKCBBD item = new DmucNoiKCBBD();
			
				item.IdKcbbd = varIdKcbbd;
			
				item.MaDiachinh = varMaDiachinh;
			
				item.MaKcbbd = varMaKcbbd;
			
				item.TenKcbbd = varTenKcbbd;
			
				item.SttHthi = varSttHthi;
			
				item.MotaThem = varMotaThem;
			
				item.DiaChi = varDiaChi;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdKcbbdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MaDiachinhColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn MaKcbbdColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn TenKcbbdColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn SttHthiColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn MotaThemColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn DiaChiColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string IdKcbbd = @"id_kcbbd";
			 public static string MaDiachinh = @"ma_diachinh";
			 public static string MaKcbbd = @"ma_kcbbd";
			 public static string TenKcbbd = @"ten_kcbbd";
			 public static string SttHthi = @"stt_hthi";
			 public static string MotaThem = @"mota_them";
			 public static string DiaChi = @"dia_chi";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
