using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VNS.HIS.DAL
{
	/// <summary>
	/// Strongly-typed collection for the SysConfigRadio class.
	/// </summary>
    [Serializable]
	public partial class SysConfigRadioCollection : ActiveList<SysConfigRadio, SysConfigRadioCollection>
	{	   
		public SysConfigRadioCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SysConfigRadioCollection</returns>
		public SysConfigRadioCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SysConfigRadio o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the SysConfigRadio table.
	/// </summary>
	[Serializable]
	public partial class SysConfigRadio : ActiveRecord<SysConfigRadio>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SysConfigRadio()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SysConfigRadio(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SysConfigRadio(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SysConfigRadio(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SysConfigRadio", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarSysId = new TableSchema.TableColumn(schema);
				colvarSysId.ColumnName = "Sys_ID";
				colvarSysId.DataType = DbType.Int32;
				colvarSysId.MaxLength = 0;
				colvarSysId.AutoIncrement = true;
				colvarSysId.IsNullable = false;
				colvarSysId.IsPrimaryKey = true;
				colvarSysId.IsForeignKey = false;
				colvarSysId.IsReadOnly = false;
				colvarSysId.DefaultSetting = @"";
				colvarSysId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSysId);
				
				TableSchema.TableColumn colvarUserName = new TableSchema.TableColumn(schema);
				colvarUserName.ColumnName = "User_Name";
				colvarUserName.DataType = DbType.String;
				colvarUserName.MaxLength = 50;
				colvarUserName.AutoIncrement = false;
				colvarUserName.IsNullable = true;
				colvarUserName.IsPrimaryKey = false;
				colvarUserName.IsForeignKey = false;
				colvarUserName.IsReadOnly = false;
				colvarUserName.DefaultSetting = @"";
				colvarUserName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserName);
				
				TableSchema.TableColumn colvarPassWord = new TableSchema.TableColumn(schema);
				colvarPassWord.ColumnName = "PassWord";
				colvarPassWord.DataType = DbType.String;
				colvarPassWord.MaxLength = 50;
				colvarPassWord.AutoIncrement = false;
				colvarPassWord.IsNullable = true;
				colvarPassWord.IsPrimaryKey = false;
				colvarPassWord.IsForeignKey = false;
				colvarPassWord.IsReadOnly = false;
				colvarPassWord.DefaultSetting = @"";
				colvarPassWord.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassWord);
				
				TableSchema.TableColumn colvarDomain = new TableSchema.TableColumn(schema);
				colvarDomain.ColumnName = "Domain";
				colvarDomain.DataType = DbType.String;
				colvarDomain.MaxLength = 50;
				colvarDomain.AutoIncrement = false;
				colvarDomain.IsNullable = true;
				colvarDomain.IsPrimaryKey = false;
				colvarDomain.IsForeignKey = false;
				colvarDomain.IsReadOnly = false;
				colvarDomain.DefaultSetting = @"";
				colvarDomain.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDomain);
				
				TableSchema.TableColumn colvarPathUNC = new TableSchema.TableColumn(schema);
				colvarPathUNC.ColumnName = "PathUNC";
				colvarPathUNC.DataType = DbType.String;
				colvarPathUNC.MaxLength = 200;
				colvarPathUNC.AutoIncrement = false;
				colvarPathUNC.IsNullable = true;
				colvarPathUNC.IsPrimaryKey = false;
				colvarPathUNC.IsForeignKey = false;
				colvarPathUNC.IsReadOnly = false;
				colvarPathUNC.DefaultSetting = @"";
				colvarPathUNC.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPathUNC);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("SysConfigRadio",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("SysId")]
		[Bindable(true)]
		public int SysId 
		{
			get { return GetColumnValue<int>(Columns.SysId); }
			set { SetColumnValue(Columns.SysId, value); }
		}
		  
		[XmlAttribute("UserName")]
		[Bindable(true)]
		public string UserName 
		{
			get { return GetColumnValue<string>(Columns.UserName); }
			set { SetColumnValue(Columns.UserName, value); }
		}
		  
		[XmlAttribute("PassWord")]
		[Bindable(true)]
		public string PassWord 
		{
			get { return GetColumnValue<string>(Columns.PassWord); }
			set { SetColumnValue(Columns.PassWord, value); }
		}
		  
		[XmlAttribute("Domain")]
		[Bindable(true)]
		public string Domain 
		{
			get { return GetColumnValue<string>(Columns.Domain); }
			set { SetColumnValue(Columns.Domain, value); }
		}
		  
		[XmlAttribute("PathUNC")]
		[Bindable(true)]
		public string PathUNC 
		{
			get { return GetColumnValue<string>(Columns.PathUNC); }
			set { SetColumnValue(Columns.PathUNC, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varUserName,string varPassWord,string varDomain,string varPathUNC)
		{
			SysConfigRadio item = new SysConfigRadio();
			
			item.UserName = varUserName;
			
			item.PassWord = varPassWord;
			
			item.Domain = varDomain;
			
			item.PathUNC = varPathUNC;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varSysId,string varUserName,string varPassWord,string varDomain,string varPathUNC)
		{
			SysConfigRadio item = new SysConfigRadio();
			
				item.SysId = varSysId;
			
				item.UserName = varUserName;
			
				item.PassWord = varPassWord;
			
				item.Domain = varDomain;
			
				item.PathUNC = varPathUNC;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn SysIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn UserNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn PassWordColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn DomainColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn PathUNCColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string SysId = @"Sys_ID";
			 public static string UserName = @"User_Name";
			 public static string PassWord = @"PassWord";
			 public static string Domain = @"Domain";
			 public static string PathUNC = @"PathUNC";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
