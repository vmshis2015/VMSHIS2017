using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VNS.HIS.DAL
{
	/// <summary>
	/// Strongly-typed collection for the DmucGoikham class.
	/// </summary>
    [Serializable]
	public partial class DmucGoikhamCollection : ActiveList<DmucGoikham, DmucGoikhamCollection>
	{	   
		public DmucGoikhamCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DmucGoikhamCollection</returns>
		public DmucGoikhamCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                DmucGoikham o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the dmuc_goikham table.
	/// </summary>
	[Serializable]
	public partial class DmucGoikham : ActiveRecord<DmucGoikham>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public DmucGoikham()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public DmucGoikham(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public DmucGoikham(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public DmucGoikham(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("dmuc_goikham", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarIdGoi = new TableSchema.TableColumn(schema);
				colvarIdGoi.ColumnName = "id_goi";
				colvarIdGoi.DataType = DbType.Int32;
				colvarIdGoi.MaxLength = 0;
				colvarIdGoi.AutoIncrement = true;
				colvarIdGoi.IsNullable = false;
				colvarIdGoi.IsPrimaryKey = true;
				colvarIdGoi.IsForeignKey = false;
				colvarIdGoi.IsReadOnly = false;
				colvarIdGoi.DefaultSetting = @"";
				colvarIdGoi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdGoi);
				
				TableSchema.TableColumn colvarMaGoi = new TableSchema.TableColumn(schema);
				colvarMaGoi.ColumnName = "ma_goi";
				colvarMaGoi.DataType = DbType.String;
				colvarMaGoi.MaxLength = 50;
				colvarMaGoi.AutoIncrement = false;
				colvarMaGoi.IsNullable = false;
				colvarMaGoi.IsPrimaryKey = false;
				colvarMaGoi.IsForeignKey = false;
				colvarMaGoi.IsReadOnly = false;
				colvarMaGoi.DefaultSetting = @"";
				colvarMaGoi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaGoi);
				
				TableSchema.TableColumn colvarTenGoi = new TableSchema.TableColumn(schema);
				colvarTenGoi.ColumnName = "ten_goi";
				colvarTenGoi.DataType = DbType.String;
				colvarTenGoi.MaxLength = 255;
				colvarTenGoi.AutoIncrement = false;
				colvarTenGoi.IsNullable = false;
				colvarTenGoi.IsPrimaryKey = false;
				colvarTenGoi.IsForeignKey = false;
				colvarTenGoi.IsReadOnly = false;
				colvarTenGoi.DefaultSetting = @"";
				colvarTenGoi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenGoi);
				
				TableSchema.TableColumn colvarDonGia = new TableSchema.TableColumn(schema);
				colvarDonGia.ColumnName = "don_gia";
				colvarDonGia.DataType = DbType.Decimal;
				colvarDonGia.MaxLength = 0;
				colvarDonGia.AutoIncrement = false;
				colvarDonGia.IsNullable = false;
				colvarDonGia.IsPrimaryKey = false;
				colvarDonGia.IsForeignKey = false;
				colvarDonGia.IsReadOnly = false;
				colvarDonGia.DefaultSetting = @"";
				colvarDonGia.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDonGia);
				
				TableSchema.TableColumn colvarMaloaigoi = new TableSchema.TableColumn(schema);
				colvarMaloaigoi.ColumnName = "maloaigoi";
				colvarMaloaigoi.DataType = DbType.String;
				colvarMaloaigoi.MaxLength = 20;
				colvarMaloaigoi.AutoIncrement = false;
				colvarMaloaigoi.IsNullable = false;
				colvarMaloaigoi.IsPrimaryKey = false;
				colvarMaloaigoi.IsForeignKey = false;
				colvarMaloaigoi.IsReadOnly = false;
				colvarMaloaigoi.DefaultSetting = @"";
				colvarMaloaigoi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaloaigoi);
				
				TableSchema.TableColumn colvarNoitru = new TableSchema.TableColumn(schema);
				colvarNoitru.ColumnName = "noitru";
				colvarNoitru.DataType = DbType.Byte;
				colvarNoitru.MaxLength = 0;
				colvarNoitru.AutoIncrement = false;
				colvarNoitru.IsNullable = false;
				colvarNoitru.IsPrimaryKey = false;
				colvarNoitru.IsForeignKey = false;
				colvarNoitru.IsReadOnly = false;
				colvarNoitru.DefaultSetting = @"";
				colvarNoitru.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNoitru);
				
				TableSchema.TableColumn colvarSongaySudung = new TableSchema.TableColumn(schema);
				colvarSongaySudung.ColumnName = "songay_sudung";
				colvarSongaySudung.DataType = DbType.Int16;
				colvarSongaySudung.MaxLength = 0;
				colvarSongaySudung.AutoIncrement = false;
				colvarSongaySudung.IsNullable = true;
				colvarSongaySudung.IsPrimaryKey = false;
				colvarSongaySudung.IsForeignKey = false;
				colvarSongaySudung.IsReadOnly = false;
				colvarSongaySudung.DefaultSetting = @"";
				colvarSongaySudung.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSongaySudung);
				
				TableSchema.TableColumn colvarLagoiMaukiemnghiem = new TableSchema.TableColumn(schema);
				colvarLagoiMaukiemnghiem.ColumnName = "lagoi_maukiemnghiem";
				colvarLagoiMaukiemnghiem.DataType = DbType.Byte;
				colvarLagoiMaukiemnghiem.MaxLength = 0;
				colvarLagoiMaukiemnghiem.AutoIncrement = false;
				colvarLagoiMaukiemnghiem.IsNullable = false;
				colvarLagoiMaukiemnghiem.IsPrimaryKey = false;
				colvarLagoiMaukiemnghiem.IsForeignKey = false;
				colvarLagoiMaukiemnghiem.IsReadOnly = false;
				
						colvarLagoiMaukiemnghiem.DefaultSetting = @"((0))";
				colvarLagoiMaukiemnghiem.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLagoiMaukiemnghiem);
				
				TableSchema.TableColumn colvarMotathem = new TableSchema.TableColumn(schema);
				colvarMotathem.ColumnName = "motathem";
				colvarMotathem.DataType = DbType.String;
				colvarMotathem.MaxLength = 10;
				colvarMotathem.AutoIncrement = false;
				colvarMotathem.IsNullable = true;
				colvarMotathem.IsPrimaryKey = false;
				colvarMotathem.IsForeignKey = false;
				colvarMotathem.IsReadOnly = false;
				colvarMotathem.DefaultSetting = @"";
				colvarMotathem.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMotathem);
				
				TableSchema.TableColumn colvarNguoiTao = new TableSchema.TableColumn(schema);
				colvarNguoiTao.ColumnName = "nguoi_tao";
				colvarNguoiTao.DataType = DbType.String;
				colvarNguoiTao.MaxLength = 30;
				colvarNguoiTao.AutoIncrement = false;
				colvarNguoiTao.IsNullable = false;
				colvarNguoiTao.IsPrimaryKey = false;
				colvarNguoiTao.IsForeignKey = false;
				colvarNguoiTao.IsReadOnly = false;
				colvarNguoiTao.DefaultSetting = @"";
				colvarNguoiTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiTao);
				
				TableSchema.TableColumn colvarNgayTao = new TableSchema.TableColumn(schema);
				colvarNgayTao.ColumnName = "ngay_tao";
				colvarNgayTao.DataType = DbType.DateTime;
				colvarNgayTao.MaxLength = 0;
				colvarNgayTao.AutoIncrement = false;
				colvarNgayTao.IsNullable = false;
				colvarNgayTao.IsPrimaryKey = false;
				colvarNgayTao.IsForeignKey = false;
				colvarNgayTao.IsReadOnly = false;
				colvarNgayTao.DefaultSetting = @"";
				colvarNgayTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayTao);
				
				TableSchema.TableColumn colvarNguoiSua = new TableSchema.TableColumn(schema);
				colvarNguoiSua.ColumnName = "nguoi_sua";
				colvarNguoiSua.DataType = DbType.String;
				colvarNguoiSua.MaxLength = 30;
				colvarNguoiSua.AutoIncrement = false;
				colvarNguoiSua.IsNullable = true;
				colvarNguoiSua.IsPrimaryKey = false;
				colvarNguoiSua.IsForeignKey = false;
				colvarNguoiSua.IsReadOnly = false;
				colvarNguoiSua.DefaultSetting = @"";
				colvarNguoiSua.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiSua);
				
				TableSchema.TableColumn colvarNgaySua = new TableSchema.TableColumn(schema);
				colvarNgaySua.ColumnName = "ngay_sua";
				colvarNgaySua.DataType = DbType.DateTime;
				colvarNgaySua.MaxLength = 0;
				colvarNgaySua.AutoIncrement = false;
				colvarNgaySua.IsNullable = true;
				colvarNgaySua.IsPrimaryKey = false;
				colvarNgaySua.IsForeignKey = false;
				colvarNgaySua.IsReadOnly = false;
				colvarNgaySua.DefaultSetting = @"";
				colvarNgaySua.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgaySua);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("dmuc_goikham",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("IdGoi")]
		[Bindable(true)]
		public int IdGoi 
		{
			get { return GetColumnValue<int>(Columns.IdGoi); }
			set { SetColumnValue(Columns.IdGoi, value); }
		}
		  
		[XmlAttribute("MaGoi")]
		[Bindable(true)]
		public string MaGoi 
		{
			get { return GetColumnValue<string>(Columns.MaGoi); }
			set { SetColumnValue(Columns.MaGoi, value); }
		}
		  
		[XmlAttribute("TenGoi")]
		[Bindable(true)]
		public string TenGoi 
		{
			get { return GetColumnValue<string>(Columns.TenGoi); }
			set { SetColumnValue(Columns.TenGoi, value); }
		}
		  
		[XmlAttribute("DonGia")]
		[Bindable(true)]
		public decimal DonGia 
		{
			get { return GetColumnValue<decimal>(Columns.DonGia); }
			set { SetColumnValue(Columns.DonGia, value); }
		}
		  
		[XmlAttribute("Maloaigoi")]
		[Bindable(true)]
		public string Maloaigoi 
		{
			get { return GetColumnValue<string>(Columns.Maloaigoi); }
			set { SetColumnValue(Columns.Maloaigoi, value); }
		}
		  
		[XmlAttribute("Noitru")]
		[Bindable(true)]
		public byte Noitru 
		{
			get { return GetColumnValue<byte>(Columns.Noitru); }
			set { SetColumnValue(Columns.Noitru, value); }
		}
		  
		[XmlAttribute("SongaySudung")]
		[Bindable(true)]
		public short? SongaySudung 
		{
			get { return GetColumnValue<short?>(Columns.SongaySudung); }
			set { SetColumnValue(Columns.SongaySudung, value); }
		}
		  
		[XmlAttribute("LagoiMaukiemnghiem")]
		[Bindable(true)]
		public byte LagoiMaukiemnghiem 
		{
			get { return GetColumnValue<byte>(Columns.LagoiMaukiemnghiem); }
			set { SetColumnValue(Columns.LagoiMaukiemnghiem, value); }
		}
		  
		[XmlAttribute("Motathem")]
		[Bindable(true)]
		public string Motathem 
		{
			get { return GetColumnValue<string>(Columns.Motathem); }
			set { SetColumnValue(Columns.Motathem, value); }
		}
		  
		[XmlAttribute("NguoiTao")]
		[Bindable(true)]
		public string NguoiTao 
		{
			get { return GetColumnValue<string>(Columns.NguoiTao); }
			set { SetColumnValue(Columns.NguoiTao, value); }
		}
		  
		[XmlAttribute("NgayTao")]
		[Bindable(true)]
		public DateTime NgayTao 
		{
			get { return GetColumnValue<DateTime>(Columns.NgayTao); }
			set { SetColumnValue(Columns.NgayTao, value); }
		}
		  
		[XmlAttribute("NguoiSua")]
		[Bindable(true)]
		public string NguoiSua 
		{
			get { return GetColumnValue<string>(Columns.NguoiSua); }
			set { SetColumnValue(Columns.NguoiSua, value); }
		}
		  
		[XmlAttribute("NgaySua")]
		[Bindable(true)]
		public DateTime? NgaySua 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgaySua); }
			set { SetColumnValue(Columns.NgaySua, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varMaGoi,string varTenGoi,decimal varDonGia,string varMaloaigoi,byte varNoitru,short? varSongaySudung,byte varLagoiMaukiemnghiem,string varMotathem,string varNguoiTao,DateTime varNgayTao,string varNguoiSua,DateTime? varNgaySua)
		{
			DmucGoikham item = new DmucGoikham();
			
			item.MaGoi = varMaGoi;
			
			item.TenGoi = varTenGoi;
			
			item.DonGia = varDonGia;
			
			item.Maloaigoi = varMaloaigoi;
			
			item.Noitru = varNoitru;
			
			item.SongaySudung = varSongaySudung;
			
			item.LagoiMaukiemnghiem = varLagoiMaukiemnghiem;
			
			item.Motathem = varMotathem;
			
			item.NguoiTao = varNguoiTao;
			
			item.NgayTao = varNgayTao;
			
			item.NguoiSua = varNguoiSua;
			
			item.NgaySua = varNgaySua;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varIdGoi,string varMaGoi,string varTenGoi,decimal varDonGia,string varMaloaigoi,byte varNoitru,short? varSongaySudung,byte varLagoiMaukiemnghiem,string varMotathem,string varNguoiTao,DateTime varNgayTao,string varNguoiSua,DateTime? varNgaySua)
		{
			DmucGoikham item = new DmucGoikham();
			
				item.IdGoi = varIdGoi;
			
				item.MaGoi = varMaGoi;
			
				item.TenGoi = varTenGoi;
			
				item.DonGia = varDonGia;
			
				item.Maloaigoi = varMaloaigoi;
			
				item.Noitru = varNoitru;
			
				item.SongaySudung = varSongaySudung;
			
				item.LagoiMaukiemnghiem = varLagoiMaukiemnghiem;
			
				item.Motathem = varMotathem;
			
				item.NguoiTao = varNguoiTao;
			
				item.NgayTao = varNgayTao;
			
				item.NguoiSua = varNguoiSua;
			
				item.NgaySua = varNgaySua;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdGoiColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MaGoiColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TenGoiColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn DonGiaColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn MaloaigoiColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn NoitruColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn SongaySudungColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn LagoiMaukiemnghiemColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn MotathemColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiTaoColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayTaoColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiSuaColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn NgaySuaColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string IdGoi = @"id_goi";
			 public static string MaGoi = @"ma_goi";
			 public static string TenGoi = @"ten_goi";
			 public static string DonGia = @"don_gia";
			 public static string Maloaigoi = @"maloaigoi";
			 public static string Noitru = @"noitru";
			 public static string SongaySudung = @"songay_sudung";
			 public static string LagoiMaukiemnghiem = @"lagoi_maukiemnghiem";
			 public static string Motathem = @"motathem";
			 public static string NguoiTao = @"nguoi_tao";
			 public static string NgayTao = @"ngay_tao";
			 public static string NguoiSua = @"nguoi_sua";
			 public static string NgaySua = @"ngay_sua";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
