using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VNS.HIS.DAL
{
	/// <summary>
	/// Strongly-typed collection for the TLog class.
	/// </summary>
    [Serializable]
	public partial class TLogCollection : ActiveList<TLog, TLogCollection>
	{	   
		public TLogCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TLogCollection</returns>
		public TLogCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TLog o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the T_Log table.
	/// </summary>
	[Serializable]
	public partial class TLog : ActiveRecord<TLog>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TLog()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TLog(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TLog(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TLog(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("T_Log", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarLogId = new TableSchema.TableColumn(schema);
				colvarLogId.ColumnName = "Log_ID";
				colvarLogId.DataType = DbType.Decimal;
				colvarLogId.MaxLength = 0;
				colvarLogId.AutoIncrement = true;
				colvarLogId.IsNullable = false;
				colvarLogId.IsPrimaryKey = true;
				colvarLogId.IsForeignKey = false;
				colvarLogId.IsReadOnly = false;
				colvarLogId.DefaultSetting = @"";
				colvarLogId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLogId);
				
				TableSchema.TableColumn colvarLogSource = new TableSchema.TableColumn(schema);
				colvarLogSource.ColumnName = "Log_Source";
				colvarLogSource.DataType = DbType.AnsiString;
				colvarLogSource.MaxLength = 10;
				colvarLogSource.AutoIncrement = false;
				colvarLogSource.IsNullable = false;
				colvarLogSource.IsPrimaryKey = false;
				colvarLogSource.IsForeignKey = false;
				colvarLogSource.IsReadOnly = false;
				colvarLogSource.DefaultSetting = @"";
				colvarLogSource.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLogSource);
				
				TableSchema.TableColumn colvarLogFunctionName = new TableSchema.TableColumn(schema);
				colvarLogFunctionName.ColumnName = "Log_Function_Name";
				colvarLogFunctionName.DataType = DbType.AnsiString;
				colvarLogFunctionName.MaxLength = 50;
				colvarLogFunctionName.AutoIncrement = false;
				colvarLogFunctionName.IsNullable = false;
				colvarLogFunctionName.IsPrimaryKey = false;
				colvarLogFunctionName.IsForeignKey = false;
				colvarLogFunctionName.IsReadOnly = false;
				colvarLogFunctionName.DefaultSetting = @"";
				colvarLogFunctionName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLogFunctionName);
				
				TableSchema.TableColumn colvarLogActionId = new TableSchema.TableColumn(schema);
				colvarLogActionId.ColumnName = "Log_Action_ID";
				colvarLogActionId.DataType = DbType.Int16;
				colvarLogActionId.MaxLength = 0;
				colvarLogActionId.AutoIncrement = false;
				colvarLogActionId.IsNullable = true;
				colvarLogActionId.IsPrimaryKey = false;
				colvarLogActionId.IsForeignKey = false;
				colvarLogActionId.IsReadOnly = false;
				colvarLogActionId.DefaultSetting = @"";
				colvarLogActionId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLogActionId);
				
				TableSchema.TableColumn colvarLogUser = new TableSchema.TableColumn(schema);
				colvarLogUser.ColumnName = "Log_User";
				colvarLogUser.DataType = DbType.AnsiString;
				colvarLogUser.MaxLength = 50;
				colvarLogUser.AutoIncrement = false;
				colvarLogUser.IsNullable = false;
				colvarLogUser.IsPrimaryKey = false;
				colvarLogUser.IsForeignKey = false;
				colvarLogUser.IsReadOnly = false;
				colvarLogUser.DefaultSetting = @"";
				colvarLogUser.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLogUser);
				
				TableSchema.TableColumn colvarLogInfo = new TableSchema.TableColumn(schema);
				colvarLogInfo.ColumnName = "Log_Info";
				colvarLogInfo.DataType = DbType.String;
				colvarLogInfo.MaxLength = 500;
				colvarLogInfo.AutoIncrement = false;
				colvarLogInfo.IsNullable = false;
				colvarLogInfo.IsPrimaryKey = false;
				colvarLogInfo.IsForeignKey = false;
				colvarLogInfo.IsReadOnly = false;
				colvarLogInfo.DefaultSetting = @"";
				colvarLogInfo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLogInfo);
				
				TableSchema.TableColumn colvarLogIp = new TableSchema.TableColumn(schema);
				colvarLogIp.ColumnName = "Log_IP";
				colvarLogIp.DataType = DbType.AnsiString;
				colvarLogIp.MaxLength = 20;
				colvarLogIp.AutoIncrement = false;
				colvarLogIp.IsNullable = false;
				colvarLogIp.IsPrimaryKey = false;
				colvarLogIp.IsForeignKey = false;
				colvarLogIp.IsReadOnly = false;
				colvarLogIp.DefaultSetting = @"";
				colvarLogIp.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLogIp);
				
				TableSchema.TableColumn colvarLogMacAddress = new TableSchema.TableColumn(schema);
				colvarLogMacAddress.ColumnName = "Log_MAC_Address";
				colvarLogMacAddress.DataType = DbType.AnsiString;
				colvarLogMacAddress.MaxLength = 50;
				colvarLogMacAddress.AutoIncrement = false;
				colvarLogMacAddress.IsNullable = false;
				colvarLogMacAddress.IsPrimaryKey = false;
				colvarLogMacAddress.IsForeignKey = false;
				colvarLogMacAddress.IsReadOnly = false;
				colvarLogMacAddress.DefaultSetting = @"";
				colvarLogMacAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLogMacAddress);
				
				TableSchema.TableColumn colvarLogTime = new TableSchema.TableColumn(schema);
				colvarLogTime.ColumnName = "Log_Time";
				colvarLogTime.DataType = DbType.DateTime;
				colvarLogTime.MaxLength = 0;
				colvarLogTime.AutoIncrement = false;
				colvarLogTime.IsNullable = false;
				colvarLogTime.IsPrimaryKey = false;
				colvarLogTime.IsForeignKey = false;
				colvarLogTime.IsReadOnly = false;
				
						colvarLogTime.DefaultSetting = @"(getdate())";
				colvarLogTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLogTime);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("T_Log",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("LogId")]
		[Bindable(true)]
		public decimal LogId 
		{
			get { return GetColumnValue<decimal>(Columns.LogId); }
			set { SetColumnValue(Columns.LogId, value); }
		}
		  
		[XmlAttribute("LogSource")]
		[Bindable(true)]
		public string LogSource 
		{
			get { return GetColumnValue<string>(Columns.LogSource); }
			set { SetColumnValue(Columns.LogSource, value); }
		}
		  
		[XmlAttribute("LogFunctionName")]
		[Bindable(true)]
		public string LogFunctionName 
		{
			get { return GetColumnValue<string>(Columns.LogFunctionName); }
			set { SetColumnValue(Columns.LogFunctionName, value); }
		}
		  
		[XmlAttribute("LogActionId")]
		[Bindable(true)]
		public short? LogActionId 
		{
			get { return GetColumnValue<short?>(Columns.LogActionId); }
			set { SetColumnValue(Columns.LogActionId, value); }
		}
		  
		[XmlAttribute("LogUser")]
		[Bindable(true)]
		public string LogUser 
		{
			get { return GetColumnValue<string>(Columns.LogUser); }
			set { SetColumnValue(Columns.LogUser, value); }
		}
		  
		[XmlAttribute("LogInfo")]
		[Bindable(true)]
		public string LogInfo 
		{
			get { return GetColumnValue<string>(Columns.LogInfo); }
			set { SetColumnValue(Columns.LogInfo, value); }
		}
		  
		[XmlAttribute("LogIp")]
		[Bindable(true)]
		public string LogIp 
		{
			get { return GetColumnValue<string>(Columns.LogIp); }
			set { SetColumnValue(Columns.LogIp, value); }
		}
		  
		[XmlAttribute("LogMacAddress")]
		[Bindable(true)]
		public string LogMacAddress 
		{
			get { return GetColumnValue<string>(Columns.LogMacAddress); }
			set { SetColumnValue(Columns.LogMacAddress, value); }
		}
		  
		[XmlAttribute("LogTime")]
		[Bindable(true)]
		public DateTime LogTime 
		{
			get { return GetColumnValue<DateTime>(Columns.LogTime); }
			set { SetColumnValue(Columns.LogTime, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varLogSource,string varLogFunctionName,short? varLogActionId,string varLogUser,string varLogInfo,string varLogIp,string varLogMacAddress,DateTime varLogTime)
		{
			TLog item = new TLog();
			
			item.LogSource = varLogSource;
			
			item.LogFunctionName = varLogFunctionName;
			
			item.LogActionId = varLogActionId;
			
			item.LogUser = varLogUser;
			
			item.LogInfo = varLogInfo;
			
			item.LogIp = varLogIp;
			
			item.LogMacAddress = varLogMacAddress;
			
			item.LogTime = varLogTime;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(decimal varLogId,string varLogSource,string varLogFunctionName,short? varLogActionId,string varLogUser,string varLogInfo,string varLogIp,string varLogMacAddress,DateTime varLogTime)
		{
			TLog item = new TLog();
			
				item.LogId = varLogId;
			
				item.LogSource = varLogSource;
			
				item.LogFunctionName = varLogFunctionName;
			
				item.LogActionId = varLogActionId;
			
				item.LogUser = varLogUser;
			
				item.LogInfo = varLogInfo;
			
				item.LogIp = varLogIp;
			
				item.LogMacAddress = varLogMacAddress;
			
				item.LogTime = varLogTime;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn LogIdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn LogSourceColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn LogFunctionNameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn LogActionIdColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn LogUserColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn LogInfoColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn LogIpColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn LogMacAddressColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn LogTimeColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string LogId = @"Log_ID";
			 public static string LogSource = @"Log_Source";
			 public static string LogFunctionName = @"Log_Function_Name";
			 public static string LogActionId = @"Log_Action_ID";
			 public static string LogUser = @"Log_User";
			 public static string LogInfo = @"Log_Info";
			 public static string LogIp = @"Log_IP";
			 public static string LogMacAddress = @"Log_MAC_Address";
			 public static string LogTime = @"Log_Time";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
