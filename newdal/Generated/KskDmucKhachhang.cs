using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VNS.HIS.DAL
{
	/// <summary>
	/// Strongly-typed collection for the KskDmucKhachhang class.
	/// </summary>
    [Serializable]
	public partial class KskDmucKhachhangCollection : ActiveList<KskDmucKhachhang, KskDmucKhachhangCollection>
	{	   
		public KskDmucKhachhangCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>KskDmucKhachhangCollection</returns>
		public KskDmucKhachhangCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                KskDmucKhachhang o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the ksk_dmuc_khachhang table.
	/// </summary>
	[Serializable]
	public partial class KskDmucKhachhang : ActiveRecord<KskDmucKhachhang>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public KskDmucKhachhang()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public KskDmucKhachhang(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public KskDmucKhachhang(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public KskDmucKhachhang(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("ksk_dmuc_khachhang", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarIdKhachHang = new TableSchema.TableColumn(schema);
				colvarIdKhachHang.ColumnName = "IdKhachHang";
				colvarIdKhachHang.DataType = DbType.Int64;
				colvarIdKhachHang.MaxLength = 0;
				colvarIdKhachHang.AutoIncrement = true;
				colvarIdKhachHang.IsNullable = false;
				colvarIdKhachHang.IsPrimaryKey = true;
				colvarIdKhachHang.IsForeignKey = false;
				colvarIdKhachHang.IsReadOnly = false;
				colvarIdKhachHang.DefaultSetting = @"";
				colvarIdKhachHang.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdKhachHang);
				
				TableSchema.TableColumn colvarMaKhachHang = new TableSchema.TableColumn(schema);
				colvarMaKhachHang.ColumnName = "MaKhachHang";
				colvarMaKhachHang.DataType = DbType.String;
				colvarMaKhachHang.MaxLength = 50;
				colvarMaKhachHang.AutoIncrement = false;
				colvarMaKhachHang.IsNullable = false;
				colvarMaKhachHang.IsPrimaryKey = false;
				colvarMaKhachHang.IsForeignKey = false;
				colvarMaKhachHang.IsReadOnly = false;
				colvarMaKhachHang.DefaultSetting = @"";
				colvarMaKhachHang.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaKhachHang);
				
				TableSchema.TableColumn colvarTenKhachHang = new TableSchema.TableColumn(schema);
				colvarTenKhachHang.ColumnName = "TenKhachHang";
				colvarTenKhachHang.DataType = DbType.String;
				colvarTenKhachHang.MaxLength = 200;
				colvarTenKhachHang.AutoIncrement = false;
				colvarTenKhachHang.IsNullable = false;
				colvarTenKhachHang.IsPrimaryKey = false;
				colvarTenKhachHang.IsForeignKey = false;
				colvarTenKhachHang.IsReadOnly = false;
				colvarTenKhachHang.DefaultSetting = @"";
				colvarTenKhachHang.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenKhachHang);
				
				TableSchema.TableColumn colvarSoDienThoai = new TableSchema.TableColumn(schema);
				colvarSoDienThoai.ColumnName = "SoDienThoai";
				colvarSoDienThoai.DataType = DbType.String;
				colvarSoDienThoai.MaxLength = 20;
				colvarSoDienThoai.AutoIncrement = false;
				colvarSoDienThoai.IsNullable = true;
				colvarSoDienThoai.IsPrimaryKey = false;
				colvarSoDienThoai.IsForeignKey = false;
				colvarSoDienThoai.IsReadOnly = false;
				colvarSoDienThoai.DefaultSetting = @"";
				colvarSoDienThoai.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSoDienThoai);
				
				TableSchema.TableColumn colvarNguoiDaiDien = new TableSchema.TableColumn(schema);
				colvarNguoiDaiDien.ColumnName = "NguoiDaiDien";
				colvarNguoiDaiDien.DataType = DbType.String;
				colvarNguoiDaiDien.MaxLength = 50;
				colvarNguoiDaiDien.AutoIncrement = false;
				colvarNguoiDaiDien.IsNullable = true;
				colvarNguoiDaiDien.IsPrimaryKey = false;
				colvarNguoiDaiDien.IsForeignKey = false;
				colvarNguoiDaiDien.IsReadOnly = false;
				colvarNguoiDaiDien.DefaultSetting = @"";
				colvarNguoiDaiDien.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiDaiDien);
				
				TableSchema.TableColumn colvarDiaChi = new TableSchema.TableColumn(schema);
				colvarDiaChi.ColumnName = "DiaChi";
				colvarDiaChi.DataType = DbType.String;
				colvarDiaChi.MaxLength = 200;
				colvarDiaChi.AutoIncrement = false;
				colvarDiaChi.IsNullable = true;
				colvarDiaChi.IsPrimaryKey = false;
				colvarDiaChi.IsForeignKey = false;
				colvarDiaChi.IsReadOnly = false;
				colvarDiaChi.DefaultSetting = @"";
				colvarDiaChi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDiaChi);
				
				TableSchema.TableColumn colvarMaSoThue = new TableSchema.TableColumn(schema);
				colvarMaSoThue.ColumnName = "MaSoThue";
				colvarMaSoThue.DataType = DbType.String;
				colvarMaSoThue.MaxLength = 20;
				colvarMaSoThue.AutoIncrement = false;
				colvarMaSoThue.IsNullable = true;
				colvarMaSoThue.IsPrimaryKey = false;
				colvarMaSoThue.IsForeignKey = false;
				colvarMaSoThue.IsReadOnly = false;
				colvarMaSoThue.DefaultSetting = @"";
				colvarMaSoThue.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaSoThue);
				
				TableSchema.TableColumn colvarTrangThai = new TableSchema.TableColumn(schema);
				colvarTrangThai.ColumnName = "TrangThai";
				colvarTrangThai.DataType = DbType.Byte;
				colvarTrangThai.MaxLength = 0;
				colvarTrangThai.AutoIncrement = false;
				colvarTrangThai.IsNullable = true;
				colvarTrangThai.IsPrimaryKey = false;
				colvarTrangThai.IsForeignKey = false;
				colvarTrangThai.IsReadOnly = false;
				colvarTrangThai.DefaultSetting = @"";
				colvarTrangThai.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTrangThai);
				
				TableSchema.TableColumn colvarSttHienThi = new TableSchema.TableColumn(schema);
				colvarSttHienThi.ColumnName = "SttHienThi";
				colvarSttHienThi.DataType = DbType.Int32;
				colvarSttHienThi.MaxLength = 0;
				colvarSttHienThi.AutoIncrement = false;
				colvarSttHienThi.IsNullable = true;
				colvarSttHienThi.IsPrimaryKey = false;
				colvarSttHienThi.IsForeignKey = false;
				colvarSttHienThi.IsReadOnly = false;
				colvarSttHienThi.DefaultSetting = @"";
				colvarSttHienThi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSttHienThi);
				
				TableSchema.TableColumn colvarSoHopDong = new TableSchema.TableColumn(schema);
				colvarSoHopDong.ColumnName = "SoHopDong";
				colvarSoHopDong.DataType = DbType.String;
				colvarSoHopDong.MaxLength = 20;
				colvarSoHopDong.AutoIncrement = false;
				colvarSoHopDong.IsNullable = true;
				colvarSoHopDong.IsPrimaryKey = false;
				colvarSoHopDong.IsForeignKey = false;
				colvarSoHopDong.IsReadOnly = false;
				colvarSoHopDong.DefaultSetting = @"";
				colvarSoHopDong.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSoHopDong);
				
				TableSchema.TableColumn colvarNgayHopDong = new TableSchema.TableColumn(schema);
				colvarNgayHopDong.ColumnName = "NgayHopDong";
				colvarNgayHopDong.DataType = DbType.DateTime;
				colvarNgayHopDong.MaxLength = 0;
				colvarNgayHopDong.AutoIncrement = false;
				colvarNgayHopDong.IsNullable = true;
				colvarNgayHopDong.IsPrimaryKey = false;
				colvarNgayHopDong.IsForeignKey = false;
				colvarNgayHopDong.IsReadOnly = false;
				colvarNgayHopDong.DefaultSetting = @"";
				colvarNgayHopDong.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayHopDong);
				
				TableSchema.TableColumn colvarNgayTao = new TableSchema.TableColumn(schema);
				colvarNgayTao.ColumnName = "NgayTao";
				colvarNgayTao.DataType = DbType.DateTime;
				colvarNgayTao.MaxLength = 0;
				colvarNgayTao.AutoIncrement = false;
				colvarNgayTao.IsNullable = true;
				colvarNgayTao.IsPrimaryKey = false;
				colvarNgayTao.IsForeignKey = false;
				colvarNgayTao.IsReadOnly = false;
				colvarNgayTao.DefaultSetting = @"";
				colvarNgayTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayTao);
				
				TableSchema.TableColumn colvarNguoiTao = new TableSchema.TableColumn(schema);
				colvarNguoiTao.ColumnName = "NguoiTao";
				colvarNguoiTao.DataType = DbType.String;
				colvarNguoiTao.MaxLength = 20;
				colvarNguoiTao.AutoIncrement = false;
				colvarNguoiTao.IsNullable = true;
				colvarNguoiTao.IsPrimaryKey = false;
				colvarNguoiTao.IsForeignKey = false;
				colvarNguoiTao.IsReadOnly = false;
				colvarNguoiTao.DefaultSetting = @"";
				colvarNguoiTao.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiTao);
				
				TableSchema.TableColumn colvarNgaySua = new TableSchema.TableColumn(schema);
				colvarNgaySua.ColumnName = "NgaySua";
				colvarNgaySua.DataType = DbType.DateTime;
				colvarNgaySua.MaxLength = 0;
				colvarNgaySua.AutoIncrement = false;
				colvarNgaySua.IsNullable = true;
				colvarNgaySua.IsPrimaryKey = false;
				colvarNgaySua.IsForeignKey = false;
				colvarNgaySua.IsReadOnly = false;
				colvarNgaySua.DefaultSetting = @"";
				colvarNgaySua.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgaySua);
				
				TableSchema.TableColumn colvarNguoiSua = new TableSchema.TableColumn(schema);
				colvarNguoiSua.ColumnName = "NguoiSua";
				colvarNguoiSua.DataType = DbType.String;
				colvarNguoiSua.MaxLength = 20;
				colvarNguoiSua.AutoIncrement = false;
				colvarNguoiSua.IsNullable = true;
				colvarNguoiSua.IsPrimaryKey = false;
				colvarNguoiSua.IsForeignKey = false;
				colvarNguoiSua.IsReadOnly = false;
				colvarNguoiSua.DefaultSetting = @"";
				colvarNguoiSua.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNguoiSua);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("ksk_dmuc_khachhang",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("IdKhachHang")]
		[Bindable(true)]
		public long IdKhachHang 
		{
			get { return GetColumnValue<long>(Columns.IdKhachHang); }
			set { SetColumnValue(Columns.IdKhachHang, value); }
		}
		  
		[XmlAttribute("MaKhachHang")]
		[Bindable(true)]
		public string MaKhachHang 
		{
			get { return GetColumnValue<string>(Columns.MaKhachHang); }
			set { SetColumnValue(Columns.MaKhachHang, value); }
		}
		  
		[XmlAttribute("TenKhachHang")]
		[Bindable(true)]
		public string TenKhachHang 
		{
			get { return GetColumnValue<string>(Columns.TenKhachHang); }
			set { SetColumnValue(Columns.TenKhachHang, value); }
		}
		  
		[XmlAttribute("SoDienThoai")]
		[Bindable(true)]
		public string SoDienThoai 
		{
			get { return GetColumnValue<string>(Columns.SoDienThoai); }
			set { SetColumnValue(Columns.SoDienThoai, value); }
		}
		  
		[XmlAttribute("NguoiDaiDien")]
		[Bindable(true)]
		public string NguoiDaiDien 
		{
			get { return GetColumnValue<string>(Columns.NguoiDaiDien); }
			set { SetColumnValue(Columns.NguoiDaiDien, value); }
		}
		  
		[XmlAttribute("DiaChi")]
		[Bindable(true)]
		public string DiaChi 
		{
			get { return GetColumnValue<string>(Columns.DiaChi); }
			set { SetColumnValue(Columns.DiaChi, value); }
		}
		  
		[XmlAttribute("MaSoThue")]
		[Bindable(true)]
		public string MaSoThue 
		{
			get { return GetColumnValue<string>(Columns.MaSoThue); }
			set { SetColumnValue(Columns.MaSoThue, value); }
		}
		  
		[XmlAttribute("TrangThai")]
		[Bindable(true)]
		public byte? TrangThai 
		{
			get { return GetColumnValue<byte?>(Columns.TrangThai); }
			set { SetColumnValue(Columns.TrangThai, value); }
		}
		  
		[XmlAttribute("SttHienThi")]
		[Bindable(true)]
		public int? SttHienThi 
		{
			get { return GetColumnValue<int?>(Columns.SttHienThi); }
			set { SetColumnValue(Columns.SttHienThi, value); }
		}
		  
		[XmlAttribute("SoHopDong")]
		[Bindable(true)]
		public string SoHopDong 
		{
			get { return GetColumnValue<string>(Columns.SoHopDong); }
			set { SetColumnValue(Columns.SoHopDong, value); }
		}
		  
		[XmlAttribute("NgayHopDong")]
		[Bindable(true)]
		public DateTime? NgayHopDong 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgayHopDong); }
			set { SetColumnValue(Columns.NgayHopDong, value); }
		}
		  
		[XmlAttribute("NgayTao")]
		[Bindable(true)]
		public DateTime? NgayTao 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgayTao); }
			set { SetColumnValue(Columns.NgayTao, value); }
		}
		  
		[XmlAttribute("NguoiTao")]
		[Bindable(true)]
		public string NguoiTao 
		{
			get { return GetColumnValue<string>(Columns.NguoiTao); }
			set { SetColumnValue(Columns.NguoiTao, value); }
		}
		  
		[XmlAttribute("NgaySua")]
		[Bindable(true)]
		public DateTime? NgaySua 
		{
			get { return GetColumnValue<DateTime?>(Columns.NgaySua); }
			set { SetColumnValue(Columns.NgaySua, value); }
		}
		  
		[XmlAttribute("NguoiSua")]
		[Bindable(true)]
		public string NguoiSua 
		{
			get { return GetColumnValue<string>(Columns.NguoiSua); }
			set { SetColumnValue(Columns.NguoiSua, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varMaKhachHang,string varTenKhachHang,string varSoDienThoai,string varNguoiDaiDien,string varDiaChi,string varMaSoThue,byte? varTrangThai,int? varSttHienThi,string varSoHopDong,DateTime? varNgayHopDong,DateTime? varNgayTao,string varNguoiTao,DateTime? varNgaySua,string varNguoiSua)
		{
			KskDmucKhachhang item = new KskDmucKhachhang();
			
			item.MaKhachHang = varMaKhachHang;
			
			item.TenKhachHang = varTenKhachHang;
			
			item.SoDienThoai = varSoDienThoai;
			
			item.NguoiDaiDien = varNguoiDaiDien;
			
			item.DiaChi = varDiaChi;
			
			item.MaSoThue = varMaSoThue;
			
			item.TrangThai = varTrangThai;
			
			item.SttHienThi = varSttHienThi;
			
			item.SoHopDong = varSoHopDong;
			
			item.NgayHopDong = varNgayHopDong;
			
			item.NgayTao = varNgayTao;
			
			item.NguoiTao = varNguoiTao;
			
			item.NgaySua = varNgaySua;
			
			item.NguoiSua = varNguoiSua;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(long varIdKhachHang,string varMaKhachHang,string varTenKhachHang,string varSoDienThoai,string varNguoiDaiDien,string varDiaChi,string varMaSoThue,byte? varTrangThai,int? varSttHienThi,string varSoHopDong,DateTime? varNgayHopDong,DateTime? varNgayTao,string varNguoiTao,DateTime? varNgaySua,string varNguoiSua)
		{
			KskDmucKhachhang item = new KskDmucKhachhang();
			
				item.IdKhachHang = varIdKhachHang;
			
				item.MaKhachHang = varMaKhachHang;
			
				item.TenKhachHang = varTenKhachHang;
			
				item.SoDienThoai = varSoDienThoai;
			
				item.NguoiDaiDien = varNguoiDaiDien;
			
				item.DiaChi = varDiaChi;
			
				item.MaSoThue = varMaSoThue;
			
				item.TrangThai = varTrangThai;
			
				item.SttHienThi = varSttHienThi;
			
				item.SoHopDong = varSoHopDong;
			
				item.NgayHopDong = varNgayHopDong;
			
				item.NgayTao = varNgayTao;
			
				item.NguoiTao = varNguoiTao;
			
				item.NgaySua = varNgaySua;
			
				item.NguoiSua = varNguoiSua;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdKhachHangColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MaKhachHangColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TenKhachHangColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn SoDienThoaiColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiDaiDienColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn DiaChiColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn MaSoThueColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn TrangThaiColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn SttHienThiColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn SoHopDongColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayHopDongColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayTaoColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiTaoColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn NgaySuaColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn NguoiSuaColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string IdKhachHang = @"IdKhachHang";
			 public static string MaKhachHang = @"MaKhachHang";
			 public static string TenKhachHang = @"TenKhachHang";
			 public static string SoDienThoai = @"SoDienThoai";
			 public static string NguoiDaiDien = @"NguoiDaiDien";
			 public static string DiaChi = @"DiaChi";
			 public static string MaSoThue = @"MaSoThue";
			 public static string TrangThai = @"TrangThai";
			 public static string SttHienThi = @"SttHienThi";
			 public static string SoHopDong = @"SoHopDong";
			 public static string NgayHopDong = @"NgayHopDong";
			 public static string NgayTao = @"NgayTao";
			 public static string NguoiTao = @"NguoiTao";
			 public static string NgaySua = @"NgaySua";
			 public static string NguoiSua = @"NguoiSua";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
