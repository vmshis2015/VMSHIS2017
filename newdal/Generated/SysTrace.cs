using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VNS.HIS.DAL
{
	/// <summary>
	/// Strongly-typed collection for the SysTrace class.
	/// </summary>
    [Serializable]
	public partial class SysTraceCollection : ActiveList<SysTrace, SysTraceCollection>
	{	   
		public SysTraceCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SysTraceCollection</returns>
		public SysTraceCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SysTrace o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Sys_Trace table.
	/// </summary>
	[Serializable]
	public partial class SysTrace : ActiveRecord<SysTrace>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SysTrace()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SysTrace(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SysTrace(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SysTrace(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Sys_Trace", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "ID";
				colvarId.DataType = DbType.Int64;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarBranchID = new TableSchema.TableColumn(schema);
				colvarBranchID.ColumnName = "BranchID";
				colvarBranchID.DataType = DbType.AnsiString;
				colvarBranchID.MaxLength = 9;
				colvarBranchID.AutoIncrement = false;
				colvarBranchID.IsNullable = false;
				colvarBranchID.IsPrimaryKey = true;
				colvarBranchID.IsForeignKey = false;
				colvarBranchID.IsReadOnly = false;
				colvarBranchID.DefaultSetting = @"";
				colvarBranchID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBranchID);
				
				TableSchema.TableColumn colvarUserName = new TableSchema.TableColumn(schema);
				colvarUserName.ColumnName = "UserName";
				colvarUserName.DataType = DbType.AnsiString;
				colvarUserName.MaxLength = 50;
				colvarUserName.AutoIncrement = false;
				colvarUserName.IsNullable = false;
				colvarUserName.IsPrimaryKey = false;
				colvarUserName.IsForeignKey = false;
				colvarUserName.IsReadOnly = false;
				colvarUserName.DefaultSetting = @"";
				colvarUserName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserName);
				
				TableSchema.TableColumn colvarCreatedDate = new TableSchema.TableColumn(schema);
				colvarCreatedDate.ColumnName = "CreatedDate";
				colvarCreatedDate.DataType = DbType.DateTime;
				colvarCreatedDate.MaxLength = 0;
				colvarCreatedDate.AutoIncrement = false;
				colvarCreatedDate.IsNullable = false;
				colvarCreatedDate.IsPrimaryKey = false;
				colvarCreatedDate.IsForeignKey = false;
				colvarCreatedDate.IsReadOnly = false;
				colvarCreatedDate.DefaultSetting = @"";
				colvarCreatedDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedDate);
				
				TableSchema.TableColumn colvarIpAddress = new TableSchema.TableColumn(schema);
				colvarIpAddress.ColumnName = "IpAddress";
				colvarIpAddress.DataType = DbType.AnsiString;
				colvarIpAddress.MaxLength = 50;
				colvarIpAddress.AutoIncrement = false;
				colvarIpAddress.IsNullable = false;
				colvarIpAddress.IsPrimaryKey = false;
				colvarIpAddress.IsForeignKey = false;
				colvarIpAddress.IsReadOnly = false;
				colvarIpAddress.DefaultSetting = @"";
				colvarIpAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIpAddress);
				
				TableSchema.TableColumn colvarComputerName = new TableSchema.TableColumn(schema);
				colvarComputerName.ColumnName = "ComputerName";
				colvarComputerName.DataType = DbType.AnsiString;
				colvarComputerName.MaxLength = 50;
				colvarComputerName.AutoIncrement = false;
				colvarComputerName.IsNullable = false;
				colvarComputerName.IsPrimaryKey = false;
				colvarComputerName.IsForeignKey = false;
				colvarComputerName.IsReadOnly = false;
				colvarComputerName.DefaultSetting = @"";
				colvarComputerName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarComputerName);
				
				TableSchema.TableColumn colvarAccountName = new TableSchema.TableColumn(schema);
				colvarAccountName.ColumnName = "AccountName";
				colvarAccountName.DataType = DbType.AnsiString;
				colvarAccountName.MaxLength = 50;
				colvarAccountName.AutoIncrement = false;
				colvarAccountName.IsNullable = false;
				colvarAccountName.IsPrimaryKey = false;
				colvarAccountName.IsForeignKey = false;
				colvarAccountName.IsReadOnly = false;
				colvarAccountName.DefaultSetting = @"";
				colvarAccountName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountName);
				
				TableSchema.TableColumn colvarDLLName = new TableSchema.TableColumn(schema);
				colvarDLLName.ColumnName = "DLLName";
				colvarDLLName.DataType = DbType.AnsiString;
				colvarDLLName.MaxLength = 50;
				colvarDLLName.AutoIncrement = false;
				colvarDLLName.IsNullable = false;
				colvarDLLName.IsPrimaryKey = false;
				colvarDLLName.IsForeignKey = false;
				colvarDLLName.IsReadOnly = false;
				colvarDLLName.DefaultSetting = @"";
				colvarDLLName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDLLName);
				
				TableSchema.TableColumn colvarSubSystemName = new TableSchema.TableColumn(schema);
				colvarSubSystemName.ColumnName = "SubSystemName";
				colvarSubSystemName.DataType = DbType.String;
				colvarSubSystemName.MaxLength = 255;
				colvarSubSystemName.AutoIncrement = false;
				colvarSubSystemName.IsNullable = false;
				colvarSubSystemName.IsPrimaryKey = false;
				colvarSubSystemName.IsForeignKey = false;
				colvarSubSystemName.IsReadOnly = false;
				colvarSubSystemName.DefaultSetting = @"";
				colvarSubSystemName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubSystemName);
				
				TableSchema.TableColumn colvarFunctionID = new TableSchema.TableColumn(schema);
				colvarFunctionID.ColumnName = "FunctionID";
				colvarFunctionID.DataType = DbType.Int32;
				colvarFunctionID.MaxLength = 0;
				colvarFunctionID.AutoIncrement = false;
				colvarFunctionID.IsNullable = false;
				colvarFunctionID.IsPrimaryKey = false;
				colvarFunctionID.IsForeignKey = false;
				colvarFunctionID.IsReadOnly = false;
				colvarFunctionID.DefaultSetting = @"";
				colvarFunctionID.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFunctionID);
				
				TableSchema.TableColumn colvarFunctionName = new TableSchema.TableColumn(schema);
				colvarFunctionName.ColumnName = "FunctionName";
				colvarFunctionName.DataType = DbType.String;
				colvarFunctionName.MaxLength = 255;
				colvarFunctionName.AutoIncrement = false;
				colvarFunctionName.IsNullable = false;
				colvarFunctionName.IsPrimaryKey = false;
				colvarFunctionName.IsForeignKey = false;
				colvarFunctionName.IsReadOnly = false;
				colvarFunctionName.DefaultSetting = @"";
				colvarFunctionName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFunctionName);
				
				TableSchema.TableColumn colvarTableName = new TableSchema.TableColumn(schema);
				colvarTableName.ColumnName = "TableName";
				colvarTableName.DataType = DbType.AnsiString;
				colvarTableName.MaxLength = 50;
				colvarTableName.AutoIncrement = false;
				colvarTableName.IsNullable = false;
				colvarTableName.IsPrimaryKey = false;
				colvarTableName.IsForeignKey = false;
				colvarTableName.IsReadOnly = false;
				colvarTableName.DefaultSetting = @"";
				colvarTableName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTableName);
				
				TableSchema.TableColumn colvarDesc = new TableSchema.TableColumn(schema);
				colvarDesc.ColumnName = "Desc";
				colvarDesc.DataType = DbType.String;
				colvarDesc.MaxLength = 255;
				colvarDesc.AutoIncrement = false;
				colvarDesc.IsNullable = false;
				colvarDesc.IsPrimaryKey = false;
				colvarDesc.IsForeignKey = false;
				colvarDesc.IsReadOnly = false;
				colvarDesc.DefaultSetting = @"";
				colvarDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDesc);
				
				TableSchema.TableColumn colvarLot = new TableSchema.TableColumn(schema);
				colvarLot.ColumnName = "LOT";
				colvarLot.DataType = DbType.Int16;
				colvarLot.MaxLength = 0;
				colvarLot.AutoIncrement = false;
				colvarLot.IsNullable = false;
				colvarLot.IsPrimaryKey = false;
				colvarLot.IsForeignKey = false;
				colvarLot.IsReadOnly = false;
				
						colvarLot.DefaultSetting = @"((0))";
				colvarLot.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLot);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("Sys_Trace",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public long Id 
		{
			get { return GetColumnValue<long>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("BranchID")]
		[Bindable(true)]
		public string BranchID 
		{
			get { return GetColumnValue<string>(Columns.BranchID); }
			set { SetColumnValue(Columns.BranchID, value); }
		}
		  
		[XmlAttribute("UserName")]
		[Bindable(true)]
		public string UserName 
		{
			get { return GetColumnValue<string>(Columns.UserName); }
			set { SetColumnValue(Columns.UserName, value); }
		}
		  
		[XmlAttribute("CreatedDate")]
		[Bindable(true)]
		public DateTime CreatedDate 
		{
			get { return GetColumnValue<DateTime>(Columns.CreatedDate); }
			set { SetColumnValue(Columns.CreatedDate, value); }
		}
		  
		[XmlAttribute("IpAddress")]
		[Bindable(true)]
		public string IpAddress 
		{
			get { return GetColumnValue<string>(Columns.IpAddress); }
			set { SetColumnValue(Columns.IpAddress, value); }
		}
		  
		[XmlAttribute("ComputerName")]
		[Bindable(true)]
		public string ComputerName 
		{
			get { return GetColumnValue<string>(Columns.ComputerName); }
			set { SetColumnValue(Columns.ComputerName, value); }
		}
		  
		[XmlAttribute("AccountName")]
		[Bindable(true)]
		public string AccountName 
		{
			get { return GetColumnValue<string>(Columns.AccountName); }
			set { SetColumnValue(Columns.AccountName, value); }
		}
		  
		[XmlAttribute("DLLName")]
		[Bindable(true)]
		public string DLLName 
		{
			get { return GetColumnValue<string>(Columns.DLLName); }
			set { SetColumnValue(Columns.DLLName, value); }
		}
		  
		[XmlAttribute("SubSystemName")]
		[Bindable(true)]
		public string SubSystemName 
		{
			get { return GetColumnValue<string>(Columns.SubSystemName); }
			set { SetColumnValue(Columns.SubSystemName, value); }
		}
		  
		[XmlAttribute("FunctionID")]
		[Bindable(true)]
		public int FunctionID 
		{
			get { return GetColumnValue<int>(Columns.FunctionID); }
			set { SetColumnValue(Columns.FunctionID, value); }
		}
		  
		[XmlAttribute("FunctionName")]
		[Bindable(true)]
		public string FunctionName 
		{
			get { return GetColumnValue<string>(Columns.FunctionName); }
			set { SetColumnValue(Columns.FunctionName, value); }
		}
		  
		[XmlAttribute("TableName")]
		[Bindable(true)]
		public string TableName 
		{
			get { return GetColumnValue<string>(Columns.TableName); }
			set { SetColumnValue(Columns.TableName, value); }
		}
		  
		[XmlAttribute("Desc")]
		[Bindable(true)]
		public string Desc 
		{
			get { return GetColumnValue<string>(Columns.Desc); }
			set { SetColumnValue(Columns.Desc, value); }
		}
		  
		[XmlAttribute("Lot")]
		[Bindable(true)]
		public short Lot 
		{
			get { return GetColumnValue<short>(Columns.Lot); }
			set { SetColumnValue(Columns.Lot, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varBranchID,string varUserName,DateTime varCreatedDate,string varIpAddress,string varComputerName,string varAccountName,string varDLLName,string varSubSystemName,int varFunctionID,string varFunctionName,string varTableName,string varDesc,short varLot)
		{
			SysTrace item = new SysTrace();
			
			item.BranchID = varBranchID;
			
			item.UserName = varUserName;
			
			item.CreatedDate = varCreatedDate;
			
			item.IpAddress = varIpAddress;
			
			item.ComputerName = varComputerName;
			
			item.AccountName = varAccountName;
			
			item.DLLName = varDLLName;
			
			item.SubSystemName = varSubSystemName;
			
			item.FunctionID = varFunctionID;
			
			item.FunctionName = varFunctionName;
			
			item.TableName = varTableName;
			
			item.Desc = varDesc;
			
			item.Lot = varLot;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(long varId,string varBranchID,string varUserName,DateTime varCreatedDate,string varIpAddress,string varComputerName,string varAccountName,string varDLLName,string varSubSystemName,int varFunctionID,string varFunctionName,string varTableName,string varDesc,short varLot)
		{
			SysTrace item = new SysTrace();
			
				item.Id = varId;
			
				item.BranchID = varBranchID;
			
				item.UserName = varUserName;
			
				item.CreatedDate = varCreatedDate;
			
				item.IpAddress = varIpAddress;
			
				item.ComputerName = varComputerName;
			
				item.AccountName = varAccountName;
			
				item.DLLName = varDLLName;
			
				item.SubSystemName = varSubSystemName;
			
				item.FunctionID = varFunctionID;
			
				item.FunctionName = varFunctionName;
			
				item.TableName = varTableName;
			
				item.Desc = varDesc;
			
				item.Lot = varLot;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn BranchIDColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn UserNameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedDateColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn IpAddressColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ComputerNameColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn AccountNameColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn DLLNameColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn SubSystemNameColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn FunctionIDColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn FunctionNameColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn TableNameColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn DescColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn LotColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"ID";
			 public static string BranchID = @"BranchID";
			 public static string UserName = @"UserName";
			 public static string CreatedDate = @"CreatedDate";
			 public static string IpAddress = @"IpAddress";
			 public static string ComputerName = @"ComputerName";
			 public static string AccountName = @"AccountName";
			 public static string DLLName = @"DLLName";
			 public static string SubSystemName = @"SubSystemName";
			 public static string FunctionID = @"FunctionID";
			 public static string FunctionName = @"FunctionName";
			 public static string TableName = @"TableName";
			 public static string Desc = @"Desc";
			 public static string Lot = @"LOT";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
