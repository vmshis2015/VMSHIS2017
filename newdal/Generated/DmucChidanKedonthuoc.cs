using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VNS.HIS.DAL
{
	/// <summary>
	/// Strongly-typed collection for the DmucChidanKedonthuoc class.
	/// </summary>
    [Serializable]
	public partial class DmucChidanKedonthuocCollection : ActiveList<DmucChidanKedonthuoc, DmucChidanKedonthuocCollection>
	{	   
		public DmucChidanKedonthuocCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DmucChidanKedonthuocCollection</returns>
		public DmucChidanKedonthuocCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                DmucChidanKedonthuoc o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the dmuc_chidan_kedonthuoc table.
	/// </summary>
	[Serializable]
	public partial class DmucChidanKedonthuoc : ActiveRecord<DmucChidanKedonthuoc>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public DmucChidanKedonthuoc()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public DmucChidanKedonthuoc(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public DmucChidanKedonthuoc(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public DmucChidanKedonthuoc(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("dmuc_chidan_kedonthuoc", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "Id";
				colvarId.DataType = DbType.Int64;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarIdBacsi = new TableSchema.TableColumn(schema);
				colvarIdBacsi.ColumnName = "id_bacsi";
				colvarIdBacsi.DataType = DbType.Int16;
				colvarIdBacsi.MaxLength = 0;
				colvarIdBacsi.AutoIncrement = false;
				colvarIdBacsi.IsNullable = false;
				colvarIdBacsi.IsPrimaryKey = false;
				colvarIdBacsi.IsForeignKey = false;
				colvarIdBacsi.IsReadOnly = false;
				colvarIdBacsi.DefaultSetting = @"";
				colvarIdBacsi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdBacsi);
				
				TableSchema.TableColumn colvarIdThuoc = new TableSchema.TableColumn(schema);
				colvarIdThuoc.ColumnName = "id_thuoc";
				colvarIdThuoc.DataType = DbType.Int32;
				colvarIdThuoc.MaxLength = 0;
				colvarIdThuoc.AutoIncrement = false;
				colvarIdThuoc.IsNullable = false;
				colvarIdThuoc.IsPrimaryKey = false;
				colvarIdThuoc.IsForeignKey = false;
				colvarIdThuoc.IsReadOnly = false;
				colvarIdThuoc.DefaultSetting = @"";
				colvarIdThuoc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdThuoc);
				
				TableSchema.TableColumn colvarSoLuong = new TableSchema.TableColumn(schema);
				colvarSoLuong.ColumnName = "so_luong";
				colvarSoLuong.DataType = DbType.Int32;
				colvarSoLuong.MaxLength = 0;
				colvarSoLuong.AutoIncrement = false;
				colvarSoLuong.IsNullable = false;
				colvarSoLuong.IsPrimaryKey = false;
				colvarSoLuong.IsForeignKey = false;
				colvarSoLuong.IsReadOnly = false;
				colvarSoLuong.DefaultSetting = @"";
				colvarSoLuong.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSoLuong);
				
				TableSchema.TableColumn colvarSoluongDung = new TableSchema.TableColumn(schema);
				colvarSoluongDung.ColumnName = "soluong_dung";
				colvarSoluongDung.DataType = DbType.String;
				colvarSoluongDung.MaxLength = 30;
				colvarSoluongDung.AutoIncrement = false;
				colvarSoluongDung.IsNullable = true;
				colvarSoluongDung.IsPrimaryKey = false;
				colvarSoluongDung.IsForeignKey = false;
				colvarSoluongDung.IsReadOnly = false;
				colvarSoluongDung.DefaultSetting = @"";
				colvarSoluongDung.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSoluongDung);
				
				TableSchema.TableColumn colvarSolanDung = new TableSchema.TableColumn(schema);
				colvarSolanDung.ColumnName = "solan_dung";
				colvarSolanDung.DataType = DbType.String;
				colvarSolanDung.MaxLength = 30;
				colvarSolanDung.AutoIncrement = false;
				colvarSolanDung.IsNullable = true;
				colvarSolanDung.IsPrimaryKey = false;
				colvarSolanDung.IsForeignKey = false;
				colvarSolanDung.IsReadOnly = false;
				colvarSolanDung.DefaultSetting = @"";
				colvarSolanDung.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSolanDung);
				
				TableSchema.TableColumn colvarCachDung = new TableSchema.TableColumn(schema);
				colvarCachDung.ColumnName = "cach_dung";
				colvarCachDung.DataType = DbType.String;
				colvarCachDung.MaxLength = 255;
				colvarCachDung.AutoIncrement = false;
				colvarCachDung.IsNullable = true;
				colvarCachDung.IsPrimaryKey = false;
				colvarCachDung.IsForeignKey = false;
				colvarCachDung.IsReadOnly = false;
				colvarCachDung.DefaultSetting = @"";
				colvarCachDung.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCachDung);
				
				TableSchema.TableColumn colvarChidanThem = new TableSchema.TableColumn(schema);
				colvarChidanThem.ColumnName = "chidan_them";
				colvarChidanThem.DataType = DbType.String;
				colvarChidanThem.MaxLength = 255;
				colvarChidanThem.AutoIncrement = false;
				colvarChidanThem.IsNullable = true;
				colvarChidanThem.IsPrimaryKey = false;
				colvarChidanThem.IsForeignKey = false;
				colvarChidanThem.IsReadOnly = false;
				colvarChidanThem.DefaultSetting = @"";
				colvarChidanThem.ForeignKeyTableName = "";
				schema.Columns.Add(colvarChidanThem);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("dmuc_chidan_kedonthuoc",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public long Id 
		{
			get { return GetColumnValue<long>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("IdBacsi")]
		[Bindable(true)]
		public short IdBacsi 
		{
			get { return GetColumnValue<short>(Columns.IdBacsi); }
			set { SetColumnValue(Columns.IdBacsi, value); }
		}
		  
		[XmlAttribute("IdThuoc")]
		[Bindable(true)]
		public int IdThuoc 
		{
			get { return GetColumnValue<int>(Columns.IdThuoc); }
			set { SetColumnValue(Columns.IdThuoc, value); }
		}
		  
		[XmlAttribute("SoLuong")]
		[Bindable(true)]
		public int SoLuong 
		{
			get { return GetColumnValue<int>(Columns.SoLuong); }
			set { SetColumnValue(Columns.SoLuong, value); }
		}
		  
		[XmlAttribute("SoluongDung")]
		[Bindable(true)]
		public string SoluongDung 
		{
			get { return GetColumnValue<string>(Columns.SoluongDung); }
			set { SetColumnValue(Columns.SoluongDung, value); }
		}
		  
		[XmlAttribute("SolanDung")]
		[Bindable(true)]
		public string SolanDung 
		{
			get { return GetColumnValue<string>(Columns.SolanDung); }
			set { SetColumnValue(Columns.SolanDung, value); }
		}
		  
		[XmlAttribute("CachDung")]
		[Bindable(true)]
		public string CachDung 
		{
			get { return GetColumnValue<string>(Columns.CachDung); }
			set { SetColumnValue(Columns.CachDung, value); }
		}
		  
		[XmlAttribute("ChidanThem")]
		[Bindable(true)]
		public string ChidanThem 
		{
			get { return GetColumnValue<string>(Columns.ChidanThem); }
			set { SetColumnValue(Columns.ChidanThem, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(short varIdBacsi,int varIdThuoc,int varSoLuong,string varSoluongDung,string varSolanDung,string varCachDung,string varChidanThem)
		{
			DmucChidanKedonthuoc item = new DmucChidanKedonthuoc();
			
			item.IdBacsi = varIdBacsi;
			
			item.IdThuoc = varIdThuoc;
			
			item.SoLuong = varSoLuong;
			
			item.SoluongDung = varSoluongDung;
			
			item.SolanDung = varSolanDung;
			
			item.CachDung = varCachDung;
			
			item.ChidanThem = varChidanThem;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(long varId,short varIdBacsi,int varIdThuoc,int varSoLuong,string varSoluongDung,string varSolanDung,string varCachDung,string varChidanThem)
		{
			DmucChidanKedonthuoc item = new DmucChidanKedonthuoc();
			
				item.Id = varId;
			
				item.IdBacsi = varIdBacsi;
			
				item.IdThuoc = varIdThuoc;
			
				item.SoLuong = varSoLuong;
			
				item.SoluongDung = varSoluongDung;
			
				item.SolanDung = varSolanDung;
			
				item.CachDung = varCachDung;
			
				item.ChidanThem = varChidanThem;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn IdBacsiColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn IdThuocColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn SoLuongColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn SoluongDungColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn SolanDungColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn CachDungColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ChidanThemColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"Id";
			 public static string IdBacsi = @"id_bacsi";
			 public static string IdThuoc = @"id_thuoc";
			 public static string SoLuong = @"so_luong";
			 public static string SoluongDung = @"soluong_dung";
			 public static string SolanDung = @"solan_dung";
			 public static string CachDung = @"cach_dung";
			 public static string ChidanThem = @"chidan_them";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
