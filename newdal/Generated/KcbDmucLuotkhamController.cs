using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VNS.HIS.DAL
{
    /// <summary>
    /// Controller class for kcb_dmuc_luotkham
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class KcbDmucLuotkhamController
    {
        // Preload our schema..
        KcbDmucLuotkham thisSchemaLoad = new KcbDmucLuotkham();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public KcbDmucLuotkhamCollection FetchAll()
        {
            KcbDmucLuotkhamCollection coll = new KcbDmucLuotkhamCollection();
            Query qry = new Query(KcbDmucLuotkham.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public KcbDmucLuotkhamCollection FetchByID(object MaLuotkham)
        {
            KcbDmucLuotkhamCollection coll = new KcbDmucLuotkhamCollection().Where("ma_luotkham", MaLuotkham).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public KcbDmucLuotkhamCollection FetchByQuery(Query qry)
        {
            KcbDmucLuotkhamCollection coll = new KcbDmucLuotkhamCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object MaLuotkham)
        {
            return (KcbDmucLuotkham.Delete(MaLuotkham) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object MaLuotkham)
        {
            return (KcbDmucLuotkham.Destroy(MaLuotkham) == 1);
        }
        
        
        
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(string MaLuotkham,short Nam,byte Loai)
        {
            Query qry = new Query(KcbDmucLuotkham.Schema);
            qry.QueryType = QueryType.Delete;
            qry.AddWhere("MaLuotkham", MaLuotkham).AND("Nam", Nam).AND("Loai", Loai);
            qry.Execute();
            return (true);
        }        
       
    	
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(int Stt,string MaLuotkham,short Nam,byte TrangThai,byte Loai,string UsedBy,DateTime? StartTime,DateTime? EndTime,string UnlockBy,DateTime? UnlockTime)
	    {
		    KcbDmucLuotkham item = new KcbDmucLuotkham();
		    
            item.Stt = Stt;
            
            item.MaLuotkham = MaLuotkham;
            
            item.Nam = Nam;
            
            item.TrangThai = TrangThai;
            
            item.Loai = Loai;
            
            item.UsedBy = UsedBy;
            
            item.StartTime = StartTime;
            
            item.EndTime = EndTime;
            
            item.UnlockBy = UnlockBy;
            
            item.UnlockTime = UnlockTime;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int Stt,string MaLuotkham,short Nam,byte TrangThai,byte Loai,string UsedBy,DateTime? StartTime,DateTime? EndTime,string UnlockBy,DateTime? UnlockTime)
	    {
		    KcbDmucLuotkham item = new KcbDmucLuotkham();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.Stt = Stt;
				
			item.MaLuotkham = MaLuotkham;
				
			item.Nam = Nam;
				
			item.TrangThai = TrangThai;
				
			item.Loai = Loai;
				
			item.UsedBy = UsedBy;
				
			item.StartTime = StartTime;
				
			item.EndTime = EndTime;
				
			item.UnlockBy = UnlockBy;
				
			item.UnlockTime = UnlockTime;
				
	        item.Save(UserName);
	    }
    }
}
