using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VNS.HIS.DAL
{
	/// <summary>
	/// Strongly-typed collection for the DynamicValue class.
	/// </summary>
    [Serializable]
	public partial class DynamicValueCollection : ActiveList<DynamicValue, DynamicValueCollection>
	{	   
		public DynamicValueCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DynamicValueCollection</returns>
		public DynamicValueCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                DynamicValue o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the DynamicValues table.
	/// </summary>
	[Serializable]
	public partial class DynamicValue : ActiveRecord<DynamicValue>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public DynamicValue()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public DynamicValue(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public DynamicValue(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public DynamicValue(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("DynamicValues", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "Id";
				colvarId.DataType = DbType.Int64;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarMa = new TableSchema.TableColumn(schema);
				colvarMa.ColumnName = "Ma";
				colvarMa.DataType = DbType.String;
				colvarMa.MaxLength = 50;
				colvarMa.AutoIncrement = false;
				colvarMa.IsNullable = true;
				colvarMa.IsPrimaryKey = false;
				colvarMa.IsForeignKey = false;
				colvarMa.IsReadOnly = false;
				colvarMa.DefaultSetting = @"";
				colvarMa.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMa);
				
				TableSchema.TableColumn colvarGiatri = new TableSchema.TableColumn(schema);
				colvarGiatri.ColumnName = "Giatri";
				colvarGiatri.DataType = DbType.String;
				colvarGiatri.MaxLength = 255;
				colvarGiatri.AutoIncrement = false;
				colvarGiatri.IsNullable = true;
				colvarGiatri.IsPrimaryKey = false;
				colvarGiatri.IsForeignKey = false;
				colvarGiatri.IsReadOnly = false;
				colvarGiatri.DefaultSetting = @"";
				colvarGiatri.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGiatri);
				
				TableSchema.TableColumn colvarRtf = new TableSchema.TableColumn(schema);
				colvarRtf.ColumnName = "rtf";
				colvarRtf.DataType = DbType.String;
				colvarRtf.MaxLength = 1073741823;
				colvarRtf.AutoIncrement = false;
				colvarRtf.IsNullable = true;
				colvarRtf.IsPrimaryKey = false;
				colvarRtf.IsForeignKey = false;
				colvarRtf.IsReadOnly = false;
				colvarRtf.DefaultSetting = @"";
				colvarRtf.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRtf);
				
				TableSchema.TableColumn colvarIdChidinhchitiet = new TableSchema.TableColumn(schema);
				colvarIdChidinhchitiet.ColumnName = "Id_chidinhchitiet";
				colvarIdChidinhchitiet.DataType = DbType.Int64;
				colvarIdChidinhchitiet.MaxLength = 0;
				colvarIdChidinhchitiet.AutoIncrement = false;
				colvarIdChidinhchitiet.IsNullable = true;
				colvarIdChidinhchitiet.IsPrimaryKey = false;
				colvarIdChidinhchitiet.IsForeignKey = false;
				colvarIdChidinhchitiet.IsReadOnly = false;
				colvarIdChidinhchitiet.DefaultSetting = @"";
				colvarIdChidinhchitiet.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdChidinhchitiet);
				
				TableSchema.TableColumn colvarImageId = new TableSchema.TableColumn(schema);
				colvarImageId.ColumnName = "ImageId";
				colvarImageId.DataType = DbType.Int64;
				colvarImageId.MaxLength = 0;
				colvarImageId.AutoIncrement = false;
				colvarImageId.IsNullable = true;
				colvarImageId.IsPrimaryKey = false;
				colvarImageId.IsForeignKey = false;
				colvarImageId.IsReadOnly = false;
				colvarImageId.DefaultSetting = @"";
				colvarImageId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarImageId);
				
				TableSchema.TableColumn colvarMaDoc = new TableSchema.TableColumn(schema);
				colvarMaDoc.ColumnName = "ma_doc";
				colvarMaDoc.DataType = DbType.String;
				colvarMaDoc.MaxLength = 20;
				colvarMaDoc.AutoIncrement = false;
				colvarMaDoc.IsNullable = true;
				colvarMaDoc.IsPrimaryKey = false;
				colvarMaDoc.IsForeignKey = false;
				colvarMaDoc.IsReadOnly = false;
				colvarMaDoc.DefaultSetting = @"";
				colvarMaDoc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaDoc);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("DynamicValues",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public long Id 
		{
			get { return GetColumnValue<long>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("Ma")]
		[Bindable(true)]
		public string Ma 
		{
			get { return GetColumnValue<string>(Columns.Ma); }
			set { SetColumnValue(Columns.Ma, value); }
		}
		  
		[XmlAttribute("Giatri")]
		[Bindable(true)]
		public string Giatri 
		{
			get { return GetColumnValue<string>(Columns.Giatri); }
			set { SetColumnValue(Columns.Giatri, value); }
		}
		  
		[XmlAttribute("Rtf")]
		[Bindable(true)]
		public string Rtf 
		{
			get { return GetColumnValue<string>(Columns.Rtf); }
			set { SetColumnValue(Columns.Rtf, value); }
		}
		  
		[XmlAttribute("IdChidinhchitiet")]
		[Bindable(true)]
		public long? IdChidinhchitiet 
		{
			get { return GetColumnValue<long?>(Columns.IdChidinhchitiet); }
			set { SetColumnValue(Columns.IdChidinhchitiet, value); }
		}
		  
		[XmlAttribute("ImageId")]
		[Bindable(true)]
		public long? ImageId 
		{
			get { return GetColumnValue<long?>(Columns.ImageId); }
			set { SetColumnValue(Columns.ImageId, value); }
		}
		  
		[XmlAttribute("MaDoc")]
		[Bindable(true)]
		public string MaDoc 
		{
			get { return GetColumnValue<string>(Columns.MaDoc); }
			set { SetColumnValue(Columns.MaDoc, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varMa,string varGiatri,string varRtf,long? varIdChidinhchitiet,long? varImageId,string varMaDoc)
		{
			DynamicValue item = new DynamicValue();
			
			item.Ma = varMa;
			
			item.Giatri = varGiatri;
			
			item.Rtf = varRtf;
			
			item.IdChidinhchitiet = varIdChidinhchitiet;
			
			item.ImageId = varImageId;
			
			item.MaDoc = varMaDoc;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(long varId,string varMa,string varGiatri,string varRtf,long? varIdChidinhchitiet,long? varImageId,string varMaDoc)
		{
			DynamicValue item = new DynamicValue();
			
				item.Id = varId;
			
				item.Ma = varMa;
			
				item.Giatri = varGiatri;
			
				item.Rtf = varRtf;
			
				item.IdChidinhchitiet = varIdChidinhchitiet;
			
				item.ImageId = varImageId;
			
				item.MaDoc = varMaDoc;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MaColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn GiatriColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn RtfColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn IdChidinhchitietColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn ImageIdColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn MaDocColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"Id";
			 public static string Ma = @"Ma";
			 public static string Giatri = @"Giatri";
			 public static string Rtf = @"rtf";
			 public static string IdChidinhchitiet = @"Id_chidinhchitiet";
			 public static string ImageId = @"ImageId";
			 public static string MaDoc = @"ma_doc";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
