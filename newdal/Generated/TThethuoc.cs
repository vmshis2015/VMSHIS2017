using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VNS.HIS.DAL
{
	/// <summary>
	/// Strongly-typed collection for the TThethuoc class.
	/// </summary>
    [Serializable]
	public partial class TThethuocCollection : ActiveList<TThethuoc, TThethuocCollection>
	{	   
		public TThethuocCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TThethuocCollection</returns>
		public TThethuocCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TThethuoc o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the t_thethuoc table.
	/// </summary>
	[Serializable]
	public partial class TThethuoc : ActiveRecord<TThethuoc>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TThethuoc()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TThethuoc(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TThethuoc(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TThethuoc(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("t_thethuoc", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarIdThuoc = new TableSchema.TableColumn(schema);
				colvarIdThuoc.ColumnName = "id_thuoc";
				colvarIdThuoc.DataType = DbType.Int64;
				colvarIdThuoc.MaxLength = 0;
				colvarIdThuoc.AutoIncrement = false;
				colvarIdThuoc.IsNullable = false;
				colvarIdThuoc.IsPrimaryKey = true;
				colvarIdThuoc.IsForeignKey = false;
				colvarIdThuoc.IsReadOnly = false;
				colvarIdThuoc.DefaultSetting = @"";
				colvarIdThuoc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdThuoc);
				
				TableSchema.TableColumn colvarIdKho = new TableSchema.TableColumn(schema);
				colvarIdKho.ColumnName = "id_kho";
				colvarIdKho.DataType = DbType.Int16;
				colvarIdKho.MaxLength = 0;
				colvarIdKho.AutoIncrement = false;
				colvarIdKho.IsNullable = false;
				colvarIdKho.IsPrimaryKey = true;
				colvarIdKho.IsForeignKey = false;
				colvarIdKho.IsReadOnly = false;
				colvarIdKho.DefaultSetting = @"";
				colvarIdKho.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdKho);
				
				TableSchema.TableColumn colvarNgayHethan = new TableSchema.TableColumn(schema);
				colvarNgayHethan.ColumnName = "ngay_hethan";
				colvarNgayHethan.DataType = DbType.DateTime;
				colvarNgayHethan.MaxLength = 0;
				colvarNgayHethan.AutoIncrement = false;
				colvarNgayHethan.IsNullable = false;
				colvarNgayHethan.IsPrimaryKey = true;
				colvarNgayHethan.IsForeignKey = false;
				colvarNgayHethan.IsReadOnly = false;
				colvarNgayHethan.DefaultSetting = @"";
				colvarNgayHethan.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgayHethan);
				
				TableSchema.TableColumn colvarDonGia = new TableSchema.TableColumn(schema);
				colvarDonGia.ColumnName = "don_gia";
				colvarDonGia.DataType = DbType.Currency;
				colvarDonGia.MaxLength = 0;
				colvarDonGia.AutoIncrement = false;
				colvarDonGia.IsNullable = false;
				colvarDonGia.IsPrimaryKey = true;
				colvarDonGia.IsForeignKey = false;
				colvarDonGia.IsReadOnly = false;
				colvarDonGia.DefaultSetting = @"";
				colvarDonGia.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDonGia);
				
				TableSchema.TableColumn colvarNgay = new TableSchema.TableColumn(schema);
				colvarNgay.ColumnName = "ngay";
				colvarNgay.DataType = DbType.DateTime;
				colvarNgay.MaxLength = 0;
				colvarNgay.AutoIncrement = false;
				colvarNgay.IsNullable = false;
				colvarNgay.IsPrimaryKey = true;
				colvarNgay.IsForeignKey = false;
				colvarNgay.IsReadOnly = false;
				colvarNgay.DefaultSetting = @"";
				colvarNgay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNgay);
				
				TableSchema.TableColumn colvarTonDaungay = new TableSchema.TableColumn(schema);
				colvarTonDaungay.ColumnName = "ton_daungay";
				colvarTonDaungay.DataType = DbType.Int32;
				colvarTonDaungay.MaxLength = 0;
				colvarTonDaungay.AutoIncrement = false;
				colvarTonDaungay.IsNullable = false;
				colvarTonDaungay.IsPrimaryKey = false;
				colvarTonDaungay.IsForeignKey = false;
				colvarTonDaungay.IsReadOnly = false;
				colvarTonDaungay.DefaultSetting = @"";
				colvarTonDaungay.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTonDaungay);
				
				TableSchema.TableColumn colvarNhap = new TableSchema.TableColumn(schema);
				colvarNhap.ColumnName = "nhap";
				colvarNhap.DataType = DbType.Int32;
				colvarNhap.MaxLength = 0;
				colvarNhap.AutoIncrement = false;
				colvarNhap.IsNullable = false;
				colvarNhap.IsPrimaryKey = false;
				colvarNhap.IsForeignKey = false;
				colvarNhap.IsReadOnly = false;
				colvarNhap.DefaultSetting = @"";
				colvarNhap.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNhap);
				
				TableSchema.TableColumn colvarXuat = new TableSchema.TableColumn(schema);
				colvarXuat.ColumnName = "xuat";
				colvarXuat.DataType = DbType.Int32;
				colvarXuat.MaxLength = 0;
				colvarXuat.AutoIncrement = false;
				colvarXuat.IsNullable = false;
				colvarXuat.IsPrimaryKey = false;
				colvarXuat.IsForeignKey = false;
				colvarXuat.IsReadOnly = false;
				colvarXuat.DefaultSetting = @"";
				colvarXuat.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXuat);
				
				TableSchema.TableColumn colvarNhapchot = new TableSchema.TableColumn(schema);
				colvarNhapchot.ColumnName = "nhapchot";
				colvarNhapchot.DataType = DbType.Int32;
				colvarNhapchot.MaxLength = 0;
				colvarNhapchot.AutoIncrement = false;
				colvarNhapchot.IsNullable = true;
				colvarNhapchot.IsPrimaryKey = false;
				colvarNhapchot.IsForeignKey = false;
				colvarNhapchot.IsReadOnly = false;
				
						colvarNhapchot.DefaultSetting = @"((0))";
				colvarNhapchot.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNhapchot);
				
				TableSchema.TableColumn colvarXuatchot = new TableSchema.TableColumn(schema);
				colvarXuatchot.ColumnName = "xuatchot";
				colvarXuatchot.DataType = DbType.Int32;
				colvarXuatchot.MaxLength = 0;
				colvarXuatchot.AutoIncrement = false;
				colvarXuatchot.IsNullable = true;
				colvarXuatchot.IsPrimaryKey = false;
				colvarXuatchot.IsForeignKey = false;
				colvarXuatchot.IsReadOnly = false;
				
						colvarXuatchot.DefaultSetting = @"((0))";
				colvarXuatchot.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXuatchot);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("t_thethuoc",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("IdThuoc")]
		[Bindable(true)]
		public long IdThuoc 
		{
			get { return GetColumnValue<long>(Columns.IdThuoc); }
			set { SetColumnValue(Columns.IdThuoc, value); }
		}
		  
		[XmlAttribute("IdKho")]
		[Bindable(true)]
		public short IdKho 
		{
			get { return GetColumnValue<short>(Columns.IdKho); }
			set { SetColumnValue(Columns.IdKho, value); }
		}
		  
		[XmlAttribute("NgayHethan")]
		[Bindable(true)]
		public DateTime NgayHethan 
		{
			get { return GetColumnValue<DateTime>(Columns.NgayHethan); }
			set { SetColumnValue(Columns.NgayHethan, value); }
		}
		  
		[XmlAttribute("DonGia")]
		[Bindable(true)]
		public decimal DonGia 
		{
			get { return GetColumnValue<decimal>(Columns.DonGia); }
			set { SetColumnValue(Columns.DonGia, value); }
		}
		  
		[XmlAttribute("Ngay")]
		[Bindable(true)]
		public DateTime Ngay 
		{
			get { return GetColumnValue<DateTime>(Columns.Ngay); }
			set { SetColumnValue(Columns.Ngay, value); }
		}
		  
		[XmlAttribute("TonDaungay")]
		[Bindable(true)]
		public int TonDaungay 
		{
			get { return GetColumnValue<int>(Columns.TonDaungay); }
			set { SetColumnValue(Columns.TonDaungay, value); }
		}
		  
		[XmlAttribute("Nhap")]
		[Bindable(true)]
		public int Nhap 
		{
			get { return GetColumnValue<int>(Columns.Nhap); }
			set { SetColumnValue(Columns.Nhap, value); }
		}
		  
		[XmlAttribute("Xuat")]
		[Bindable(true)]
		public int Xuat 
		{
			get { return GetColumnValue<int>(Columns.Xuat); }
			set { SetColumnValue(Columns.Xuat, value); }
		}
		  
		[XmlAttribute("Nhapchot")]
		[Bindable(true)]
		public int? Nhapchot 
		{
			get { return GetColumnValue<int?>(Columns.Nhapchot); }
			set { SetColumnValue(Columns.Nhapchot, value); }
		}
		  
		[XmlAttribute("Xuatchot")]
		[Bindable(true)]
		public int? Xuatchot 
		{
			get { return GetColumnValue<int?>(Columns.Xuatchot); }
			set { SetColumnValue(Columns.Xuatchot, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(long varIdThuoc,short varIdKho,DateTime varNgayHethan,decimal varDonGia,DateTime varNgay,int varTonDaungay,int varNhap,int varXuat,int? varNhapchot,int? varXuatchot)
		{
			TThethuoc item = new TThethuoc();
			
			item.IdThuoc = varIdThuoc;
			
			item.IdKho = varIdKho;
			
			item.NgayHethan = varNgayHethan;
			
			item.DonGia = varDonGia;
			
			item.Ngay = varNgay;
			
			item.TonDaungay = varTonDaungay;
			
			item.Nhap = varNhap;
			
			item.Xuat = varXuat;
			
			item.Nhapchot = varNhapchot;
			
			item.Xuatchot = varXuatchot;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(long varIdThuoc,short varIdKho,DateTime varNgayHethan,decimal varDonGia,DateTime varNgay,int varTonDaungay,int varNhap,int varXuat,int? varNhapchot,int? varXuatchot)
		{
			TThethuoc item = new TThethuoc();
			
				item.IdThuoc = varIdThuoc;
			
				item.IdKho = varIdKho;
			
				item.NgayHethan = varNgayHethan;
			
				item.DonGia = varDonGia;
			
				item.Ngay = varNgay;
			
				item.TonDaungay = varTonDaungay;
			
				item.Nhap = varNhap;
			
				item.Xuat = varXuat;
			
				item.Nhapchot = varNhapchot;
			
				item.Xuatchot = varXuatchot;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdThuocColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn IdKhoColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayHethanColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn DonGiaColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn NgayColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn TonDaungayColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn NhapColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn XuatColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn NhapchotColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn XuatchotColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string IdThuoc = @"id_thuoc";
			 public static string IdKho = @"id_kho";
			 public static string NgayHethan = @"ngay_hethan";
			 public static string DonGia = @"don_gia";
			 public static string Ngay = @"ngay";
			 public static string TonDaungay = @"ton_daungay";
			 public static string Nhap = @"nhap";
			 public static string Xuat = @"xuat";
			 public static string Nhapchot = @"nhapchot";
			 public static string Xuatchot = @"xuatchot";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
