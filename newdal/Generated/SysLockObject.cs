using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VNS.HIS.DAL
{
	/// <summary>
	/// Strongly-typed collection for the SysLockObject class.
	/// </summary>
    [Serializable]
	public partial class SysLockObjectCollection : ActiveList<SysLockObject, SysLockObjectCollection>
	{	   
		public SysLockObjectCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SysLockObjectCollection</returns>
		public SysLockObjectCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SysLockObject o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Sys_LockObject table.
	/// </summary>
	[Serializable]
	public partial class SysLockObject : ActiveRecord<SysLockObject>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SysLockObject()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SysLockObject(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SysLockObject(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SysLockObject(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Sys_LockObject", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarMaLuotkham = new TableSchema.TableColumn(schema);
				colvarMaLuotkham.ColumnName = "ma_luotkham";
				colvarMaLuotkham.DataType = DbType.String;
				colvarMaLuotkham.MaxLength = 10;
				colvarMaLuotkham.AutoIncrement = false;
				colvarMaLuotkham.IsNullable = false;
				colvarMaLuotkham.IsPrimaryKey = true;
				colvarMaLuotkham.IsForeignKey = false;
				colvarMaLuotkham.IsReadOnly = false;
				colvarMaLuotkham.DefaultSetting = @"";
				colvarMaLuotkham.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaLuotkham);
				
				TableSchema.TableColumn colvarLockedFullname = new TableSchema.TableColumn(schema);
				colvarLockedFullname.ColumnName = "locked_fullname";
				colvarLockedFullname.DataType = DbType.String;
				colvarLockedFullname.MaxLength = 255;
				colvarLockedFullname.AutoIncrement = false;
				colvarLockedFullname.IsNullable = true;
				colvarLockedFullname.IsPrimaryKey = false;
				colvarLockedFullname.IsForeignKey = false;
				colvarLockedFullname.IsReadOnly = false;
				colvarLockedFullname.DefaultSetting = @"";
				colvarLockedFullname.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLockedFullname);
				
				TableSchema.TableColumn colvarLockedBy = new TableSchema.TableColumn(schema);
				colvarLockedBy.ColumnName = "locked_by";
				colvarLockedBy.DataType = DbType.String;
				colvarLockedBy.MaxLength = 30;
				colvarLockedBy.AutoIncrement = false;
				colvarLockedBy.IsNullable = false;
				colvarLockedBy.IsPrimaryKey = false;
				colvarLockedBy.IsForeignKey = false;
				colvarLockedBy.IsReadOnly = false;
				colvarLockedBy.DefaultSetting = @"";
				colvarLockedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLockedBy);
				
				TableSchema.TableColumn colvarLockedTime = new TableSchema.TableColumn(schema);
				colvarLockedTime.ColumnName = "locked_time";
				colvarLockedTime.DataType = DbType.DateTime;
				colvarLockedTime.MaxLength = 0;
				colvarLockedTime.AutoIncrement = false;
				colvarLockedTime.IsNullable = false;
				colvarLockedTime.IsPrimaryKey = false;
				colvarLockedTime.IsForeignKey = false;
				colvarLockedTime.IsReadOnly = false;
				colvarLockedTime.DefaultSetting = @"";
				colvarLockedTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLockedTime);
				
				TableSchema.TableColumn colvarFunctionCode = new TableSchema.TableColumn(schema);
				colvarFunctionCode.ColumnName = "function_code";
				colvarFunctionCode.DataType = DbType.String;
				colvarFunctionCode.MaxLength = 10;
				colvarFunctionCode.AutoIncrement = false;
				colvarFunctionCode.IsNullable = true;
				colvarFunctionCode.IsPrimaryKey = false;
				colvarFunctionCode.IsForeignKey = false;
				colvarFunctionCode.IsReadOnly = false;
				colvarFunctionCode.DefaultSetting = @"";
				colvarFunctionCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFunctionCode);
				
				TableSchema.TableColumn colvarFunctionName = new TableSchema.TableColumn(schema);
				colvarFunctionName.ColumnName = "function_name";
				colvarFunctionName.DataType = DbType.String;
				colvarFunctionName.MaxLength = 255;
				colvarFunctionName.AutoIncrement = false;
				colvarFunctionName.IsNullable = true;
				colvarFunctionName.IsPrimaryKey = false;
				colvarFunctionName.IsForeignKey = false;
				colvarFunctionName.IsReadOnly = false;
				colvarFunctionName.DefaultSetting = @"";
				colvarFunctionName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFunctionName);
				
				TableSchema.TableColumn colvarSDesc = new TableSchema.TableColumn(schema);
				colvarSDesc.ColumnName = "sDesc";
				colvarSDesc.DataType = DbType.String;
				colvarSDesc.MaxLength = 255;
				colvarSDesc.AutoIncrement = false;
				colvarSDesc.IsNullable = true;
				colvarSDesc.IsPrimaryKey = false;
				colvarSDesc.IsForeignKey = false;
				colvarSDesc.IsReadOnly = false;
				colvarSDesc.DefaultSetting = @"";
				colvarSDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSDesc);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("Sys_LockObject",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("MaLuotkham")]
		[Bindable(true)]
		public string MaLuotkham 
		{
			get { return GetColumnValue<string>(Columns.MaLuotkham); }
			set { SetColumnValue(Columns.MaLuotkham, value); }
		}
		  
		[XmlAttribute("LockedFullname")]
		[Bindable(true)]
		public string LockedFullname 
		{
			get { return GetColumnValue<string>(Columns.LockedFullname); }
			set { SetColumnValue(Columns.LockedFullname, value); }
		}
		  
		[XmlAttribute("LockedBy")]
		[Bindable(true)]
		public string LockedBy 
		{
			get { return GetColumnValue<string>(Columns.LockedBy); }
			set { SetColumnValue(Columns.LockedBy, value); }
		}
		  
		[XmlAttribute("LockedTime")]
		[Bindable(true)]
		public DateTime LockedTime 
		{
			get { return GetColumnValue<DateTime>(Columns.LockedTime); }
			set { SetColumnValue(Columns.LockedTime, value); }
		}
		  
		[XmlAttribute("FunctionCode")]
		[Bindable(true)]
		public string FunctionCode 
		{
			get { return GetColumnValue<string>(Columns.FunctionCode); }
			set { SetColumnValue(Columns.FunctionCode, value); }
		}
		  
		[XmlAttribute("FunctionName")]
		[Bindable(true)]
		public string FunctionName 
		{
			get { return GetColumnValue<string>(Columns.FunctionName); }
			set { SetColumnValue(Columns.FunctionName, value); }
		}
		  
		[XmlAttribute("SDesc")]
		[Bindable(true)]
		public string SDesc 
		{
			get { return GetColumnValue<string>(Columns.SDesc); }
			set { SetColumnValue(Columns.SDesc, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varMaLuotkham,string varLockedFullname,string varLockedBy,DateTime varLockedTime,string varFunctionCode,string varFunctionName,string varSDesc)
		{
			SysLockObject item = new SysLockObject();
			
			item.MaLuotkham = varMaLuotkham;
			
			item.LockedFullname = varLockedFullname;
			
			item.LockedBy = varLockedBy;
			
			item.LockedTime = varLockedTime;
			
			item.FunctionCode = varFunctionCode;
			
			item.FunctionName = varFunctionName;
			
			item.SDesc = varSDesc;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varMaLuotkham,string varLockedFullname,string varLockedBy,DateTime varLockedTime,string varFunctionCode,string varFunctionName,string varSDesc)
		{
			SysLockObject item = new SysLockObject();
			
				item.MaLuotkham = varMaLuotkham;
			
				item.LockedFullname = varLockedFullname;
			
				item.LockedBy = varLockedBy;
			
				item.LockedTime = varLockedTime;
			
				item.FunctionCode = varFunctionCode;
			
				item.FunctionName = varFunctionName;
			
				item.SDesc = varSDesc;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn MaLuotkhamColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn LockedFullnameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn LockedByColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn LockedTimeColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn FunctionCodeColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn FunctionNameColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn SDescColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string MaLuotkham = @"ma_luotkham";
			 public static string LockedFullname = @"locked_fullname";
			 public static string LockedBy = @"locked_by";
			 public static string LockedTime = @"locked_time";
			 public static string FunctionCode = @"function_code";
			 public static string FunctionName = @"function_name";
			 public static string SDesc = @"sDesc";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
