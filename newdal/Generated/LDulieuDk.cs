using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VNS.HIS.DAL
{
	/// <summary>
	/// Strongly-typed collection for the LDulieuDk class.
	/// </summary>
    [Serializable]
	public partial class LDulieuDkCollection : ActiveList<LDulieuDk, LDulieuDkCollection>
	{	   
		public LDulieuDkCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>LDulieuDkCollection</returns>
		public LDulieuDkCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                LDulieuDk o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the L_DULIEU_DK table.
	/// </summary>
	[Serializable]
	public partial class LDulieuDk : ActiveRecord<LDulieuDk>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public LDulieuDk()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public LDulieuDk(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public LDulieuDk(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public LDulieuDk(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("L_DULIEU_DK", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarIdDuLieuDk = new TableSchema.TableColumn(schema);
				colvarIdDuLieuDk.ColumnName = "ID_DuLieu_DK";
				colvarIdDuLieuDk.DataType = DbType.Int32;
				colvarIdDuLieuDk.MaxLength = 0;
				colvarIdDuLieuDk.AutoIncrement = true;
				colvarIdDuLieuDk.IsNullable = false;
				colvarIdDuLieuDk.IsPrimaryKey = true;
				colvarIdDuLieuDk.IsForeignKey = false;
				colvarIdDuLieuDk.IsReadOnly = false;
				colvarIdDuLieuDk.DefaultSetting = @"";
				colvarIdDuLieuDk.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdDuLieuDk);
				
				TableSchema.TableColumn colvarThuTuIn = new TableSchema.TableColumn(schema);
				colvarThuTuIn.ColumnName = "Thu_Tu_In";
				colvarThuTuIn.DataType = DbType.Int32;
				colvarThuTuIn.MaxLength = 0;
				colvarThuTuIn.AutoIncrement = false;
				colvarThuTuIn.IsNullable = true;
				colvarThuTuIn.IsPrimaryKey = false;
				colvarThuTuIn.IsForeignKey = false;
				colvarThuTuIn.IsReadOnly = false;
				colvarThuTuIn.DefaultSetting = @"";
				colvarThuTuIn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarThuTuIn);
				
				TableSchema.TableColumn colvarTenKq = new TableSchema.TableColumn(schema);
				colvarTenKq.ColumnName = "Ten_KQ";
				colvarTenKq.DataType = DbType.String;
				colvarTenKq.MaxLength = 50;
				colvarTenKq.AutoIncrement = false;
				colvarTenKq.IsNullable = false;
				colvarTenKq.IsPrimaryKey = false;
				colvarTenKq.IsForeignKey = false;
				colvarTenKq.IsReadOnly = false;
				colvarTenKq.DefaultSetting = @"";
				colvarTenKq.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenKq);
				
				TableSchema.TableColumn colvarTenThongSo = new TableSchema.TableColumn(schema);
				colvarTenThongSo.ColumnName = "Ten_Thong_So";
				colvarTenThongSo.DataType = DbType.String;
				colvarTenThongSo.MaxLength = 50;
				colvarTenThongSo.AutoIncrement = false;
				colvarTenThongSo.IsNullable = true;
				colvarTenThongSo.IsPrimaryKey = false;
				colvarTenThongSo.IsForeignKey = false;
				colvarTenThongSo.IsReadOnly = false;
				colvarTenThongSo.DefaultSetting = @"";
				colvarTenThongSo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTenThongSo);
				
				TableSchema.TableColumn colvarDonVi = new TableSchema.TableColumn(schema);
				colvarDonVi.ColumnName = "Don_Vi";
				colvarDonVi.DataType = DbType.String;
				colvarDonVi.MaxLength = 50;
				colvarDonVi.AutoIncrement = false;
				colvarDonVi.IsNullable = true;
				colvarDonVi.IsPrimaryKey = false;
				colvarDonVi.IsForeignKey = false;
				colvarDonVi.IsReadOnly = false;
				colvarDonVi.DefaultSetting = @"";
				colvarDonVi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDonVi);
				
				TableSchema.TableColumn colvarTbNam = new TableSchema.TableColumn(schema);
				colvarTbNam.ColumnName = "TB_Nam";
				colvarTbNam.DataType = DbType.String;
				colvarTbNam.MaxLength = 100;
				colvarTbNam.AutoIncrement = false;
				colvarTbNam.IsNullable = true;
				colvarTbNam.IsPrimaryKey = false;
				colvarTbNam.IsForeignKey = false;
				colvarTbNam.IsReadOnly = false;
				colvarTbNam.DefaultSetting = @"";
				colvarTbNam.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTbNam);
				
				TableSchema.TableColumn colvarTbNu = new TableSchema.TableColumn(schema);
				colvarTbNu.ColumnName = "TB_Nu";
				colvarTbNu.DataType = DbType.String;
				colvarTbNu.MaxLength = 100;
				colvarTbNu.AutoIncrement = false;
				colvarTbNu.IsNullable = true;
				colvarTbNu.IsPrimaryKey = false;
				colvarTbNu.IsForeignKey = false;
				colvarTbNu.IsReadOnly = false;
				colvarTbNu.DefaultSetting = @"";
				colvarTbNu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTbNu);
				
				TableSchema.TableColumn colvarChoPhepHienThi = new TableSchema.TableColumn(schema);
				colvarChoPhepHienThi.ColumnName = "Cho_Phep_Hien_Thi";
				colvarChoPhepHienThi.DataType = DbType.Int32;
				colvarChoPhepHienThi.MaxLength = 0;
				colvarChoPhepHienThi.AutoIncrement = false;
				colvarChoPhepHienThi.IsNullable = true;
				colvarChoPhepHienThi.IsPrimaryKey = false;
				colvarChoPhepHienThi.IsForeignKey = false;
				colvarChoPhepHienThi.IsReadOnly = false;
				
						colvarChoPhepHienThi.DefaultSetting = @"((1))";
				colvarChoPhepHienThi.ForeignKeyTableName = "";
				schema.Columns.Add(colvarChoPhepHienThi);
				
				TableSchema.TableColumn colvarChoPhepIn = new TableSchema.TableColumn(schema);
				colvarChoPhepIn.ColumnName = "Cho_Phep_In";
				colvarChoPhepIn.DataType = DbType.Int32;
				colvarChoPhepIn.MaxLength = 0;
				colvarChoPhepIn.AutoIncrement = false;
				colvarChoPhepIn.IsNullable = true;
				colvarChoPhepIn.IsPrimaryKey = false;
				colvarChoPhepIn.IsForeignKey = false;
				colvarChoPhepIn.IsReadOnly = false;
				
						colvarChoPhepIn.DefaultSetting = @"((1))";
				colvarChoPhepIn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarChoPhepIn);
				
				TableSchema.TableColumn colvarGhiChu = new TableSchema.TableColumn(schema);
				colvarGhiChu.ColumnName = "Ghi_Chu";
				colvarGhiChu.DataType = DbType.String;
				colvarGhiChu.MaxLength = 200;
				colvarGhiChu.AutoIncrement = false;
				colvarGhiChu.IsNullable = true;
				colvarGhiChu.IsPrimaryKey = false;
				colvarGhiChu.IsForeignKey = false;
				colvarGhiChu.IsReadOnly = false;
				colvarGhiChu.DefaultSetting = @"";
				colvarGhiChu.ForeignKeyTableName = "";
				schema.Columns.Add(colvarGhiChu);
				
				TableSchema.TableColumn colvarIdLoaiXn = new TableSchema.TableColumn(schema);
				colvarIdLoaiXn.ColumnName = "ID_LOAI_XN";
				colvarIdLoaiXn.DataType = DbType.Int32;
				colvarIdLoaiXn.MaxLength = 0;
				colvarIdLoaiXn.AutoIncrement = false;
				colvarIdLoaiXn.IsNullable = true;
				colvarIdLoaiXn.IsPrimaryKey = false;
				colvarIdLoaiXn.IsForeignKey = false;
				colvarIdLoaiXn.IsReadOnly = false;
				colvarIdLoaiXn.DefaultSetting = @"";
				colvarIdLoaiXn.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdLoaiXn);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("L_DULIEU_DK",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("IdDuLieuDk")]
		[Bindable(true)]
		public int IdDuLieuDk 
		{
			get { return GetColumnValue<int>(Columns.IdDuLieuDk); }
			set { SetColumnValue(Columns.IdDuLieuDk, value); }
		}
		  
		[XmlAttribute("ThuTuIn")]
		[Bindable(true)]
		public int? ThuTuIn 
		{
			get { return GetColumnValue<int?>(Columns.ThuTuIn); }
			set { SetColumnValue(Columns.ThuTuIn, value); }
		}
		  
		[XmlAttribute("TenKq")]
		[Bindable(true)]
		public string TenKq 
		{
			get { return GetColumnValue<string>(Columns.TenKq); }
			set { SetColumnValue(Columns.TenKq, value); }
		}
		  
		[XmlAttribute("TenThongSo")]
		[Bindable(true)]
		public string TenThongSo 
		{
			get { return GetColumnValue<string>(Columns.TenThongSo); }
			set { SetColumnValue(Columns.TenThongSo, value); }
		}
		  
		[XmlAttribute("DonVi")]
		[Bindable(true)]
		public string DonVi 
		{
			get { return GetColumnValue<string>(Columns.DonVi); }
			set { SetColumnValue(Columns.DonVi, value); }
		}
		  
		[XmlAttribute("TbNam")]
		[Bindable(true)]
		public string TbNam 
		{
			get { return GetColumnValue<string>(Columns.TbNam); }
			set { SetColumnValue(Columns.TbNam, value); }
		}
		  
		[XmlAttribute("TbNu")]
		[Bindable(true)]
		public string TbNu 
		{
			get { return GetColumnValue<string>(Columns.TbNu); }
			set { SetColumnValue(Columns.TbNu, value); }
		}
		  
		[XmlAttribute("ChoPhepHienThi")]
		[Bindable(true)]
		public int? ChoPhepHienThi 
		{
			get { return GetColumnValue<int?>(Columns.ChoPhepHienThi); }
			set { SetColumnValue(Columns.ChoPhepHienThi, value); }
		}
		  
		[XmlAttribute("ChoPhepIn")]
		[Bindable(true)]
		public int? ChoPhepIn 
		{
			get { return GetColumnValue<int?>(Columns.ChoPhepIn); }
			set { SetColumnValue(Columns.ChoPhepIn, value); }
		}
		  
		[XmlAttribute("GhiChu")]
		[Bindable(true)]
		public string GhiChu 
		{
			get { return GetColumnValue<string>(Columns.GhiChu); }
			set { SetColumnValue(Columns.GhiChu, value); }
		}
		  
		[XmlAttribute("IdLoaiXn")]
		[Bindable(true)]
		public int? IdLoaiXn 
		{
			get { return GetColumnValue<int?>(Columns.IdLoaiXn); }
			set { SetColumnValue(Columns.IdLoaiXn, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varThuTuIn,string varTenKq,string varTenThongSo,string varDonVi,string varTbNam,string varTbNu,int? varChoPhepHienThi,int? varChoPhepIn,string varGhiChu,int? varIdLoaiXn)
		{
			LDulieuDk item = new LDulieuDk();
			
			item.ThuTuIn = varThuTuIn;
			
			item.TenKq = varTenKq;
			
			item.TenThongSo = varTenThongSo;
			
			item.DonVi = varDonVi;
			
			item.TbNam = varTbNam;
			
			item.TbNu = varTbNu;
			
			item.ChoPhepHienThi = varChoPhepHienThi;
			
			item.ChoPhepIn = varChoPhepIn;
			
			item.GhiChu = varGhiChu;
			
			item.IdLoaiXn = varIdLoaiXn;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varIdDuLieuDk,int? varThuTuIn,string varTenKq,string varTenThongSo,string varDonVi,string varTbNam,string varTbNu,int? varChoPhepHienThi,int? varChoPhepIn,string varGhiChu,int? varIdLoaiXn)
		{
			LDulieuDk item = new LDulieuDk();
			
				item.IdDuLieuDk = varIdDuLieuDk;
			
				item.ThuTuIn = varThuTuIn;
			
				item.TenKq = varTenKq;
			
				item.TenThongSo = varTenThongSo;
			
				item.DonVi = varDonVi;
			
				item.TbNam = varTbNam;
			
				item.TbNu = varTbNu;
			
				item.ChoPhepHienThi = varChoPhepHienThi;
			
				item.ChoPhepIn = varChoPhepIn;
			
				item.GhiChu = varGhiChu;
			
				item.IdLoaiXn = varIdLoaiXn;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdDuLieuDkColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ThuTuInColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn TenKqColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn TenThongSoColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn DonViColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn TbNamColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn TbNuColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn ChoPhepHienThiColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn ChoPhepInColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn GhiChuColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn IdLoaiXnColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string IdDuLieuDk = @"ID_DuLieu_DK";
			 public static string ThuTuIn = @"Thu_Tu_In";
			 public static string TenKq = @"Ten_KQ";
			 public static string TenThongSo = @"Ten_Thong_So";
			 public static string DonVi = @"Don_Vi";
			 public static string TbNam = @"TB_Nam";
			 public static string TbNu = @"TB_Nu";
			 public static string ChoPhepHienThi = @"Cho_Phep_Hien_Thi";
			 public static string ChoPhepIn = @"Cho_Phep_In";
			 public static string GhiChu = @"Ghi_Chu";
			 public static string IdLoaiXn = @"ID_LOAI_XN";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
