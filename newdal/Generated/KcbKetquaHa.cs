using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VNS.HIS.DAL
{
	/// <summary>
	/// Strongly-typed collection for the KcbKetquaHa class.
	/// </summary>
    [Serializable]
	public partial class KcbKetquaHaCollection : ActiveList<KcbKetquaHa, KcbKetquaHaCollection>
	{	   
		public KcbKetquaHaCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>KcbKetquaHaCollection</returns>
		public KcbKetquaHaCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                KcbKetquaHa o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the kcb_ketqua_ha table.
	/// </summary>
	[Serializable]
	public partial class KcbKetquaHa : ActiveRecord<KcbKetquaHa>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public KcbKetquaHa()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public KcbKetquaHa(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public KcbKetquaHa(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public KcbKetquaHa(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("kcb_ketqua_ha", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "Id";
				colvarId.DataType = DbType.Int64;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarNameFile = new TableSchema.TableColumn(schema);
				colvarNameFile.ColumnName = "NameFile";
				colvarNameFile.DataType = DbType.String;
				colvarNameFile.MaxLength = 100;
				colvarNameFile.AutoIncrement = false;
				colvarNameFile.IsNullable = true;
				colvarNameFile.IsPrimaryKey = false;
				colvarNameFile.IsForeignKey = false;
				colvarNameFile.IsReadOnly = false;
				colvarNameFile.DefaultSetting = @"";
				colvarNameFile.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNameFile);
				
				TableSchema.TableColumn colvarDisplayName = new TableSchema.TableColumn(schema);
				colvarDisplayName.ColumnName = "DisplayName";
				colvarDisplayName.DataType = DbType.String;
				colvarDisplayName.MaxLength = 100;
				colvarDisplayName.AutoIncrement = false;
				colvarDisplayName.IsNullable = true;
				colvarDisplayName.IsPrimaryKey = false;
				colvarDisplayName.IsForeignKey = false;
				colvarDisplayName.IsReadOnly = false;
				colvarDisplayName.DefaultSetting = @"";
				colvarDisplayName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDisplayName);
				
				TableSchema.TableColumn colvarFileData = new TableSchema.TableColumn(schema);
				colvarFileData.ColumnName = "FileData";
				colvarFileData.DataType = DbType.Binary;
				colvarFileData.MaxLength = -1;
				colvarFileData.AutoIncrement = false;
				colvarFileData.IsNullable = true;
				colvarFileData.IsPrimaryKey = false;
				colvarFileData.IsForeignKey = false;
				colvarFileData.IsReadOnly = false;
				colvarFileData.DefaultSetting = @"";
				colvarFileData.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFileData);
				
				TableSchema.TableColumn colvarFileSize = new TableSchema.TableColumn(schema);
				colvarFileSize.ColumnName = "FileSize";
				colvarFileSize.DataType = DbType.Int64;
				colvarFileSize.MaxLength = 0;
				colvarFileSize.AutoIncrement = false;
				colvarFileSize.IsNullable = true;
				colvarFileSize.IsPrimaryKey = false;
				colvarFileSize.IsForeignKey = false;
				colvarFileSize.IsReadOnly = false;
				colvarFileSize.DefaultSetting = @"";
				colvarFileSize.ForeignKeyTableName = "";
				schema.Columns.Add(colvarFileSize);
				
				TableSchema.TableColumn colvarUploadDate = new TableSchema.TableColumn(schema);
				colvarUploadDate.ColumnName = "UploadDate";
				colvarUploadDate.DataType = DbType.DateTime;
				colvarUploadDate.MaxLength = 0;
				colvarUploadDate.AutoIncrement = false;
				colvarUploadDate.IsNullable = true;
				colvarUploadDate.IsPrimaryKey = false;
				colvarUploadDate.IsForeignKey = false;
				colvarUploadDate.IsReadOnly = false;
				colvarUploadDate.DefaultSetting = @"";
				colvarUploadDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUploadDate);
				
				TableSchema.TableColumn colvarMaLanKham = new TableSchema.TableColumn(schema);
				colvarMaLanKham.ColumnName = "MaLanKham";
				colvarMaLanKham.DataType = DbType.String;
				colvarMaLanKham.MaxLength = 20;
				colvarMaLanKham.AutoIncrement = false;
				colvarMaLanKham.IsNullable = true;
				colvarMaLanKham.IsPrimaryKey = false;
				colvarMaLanKham.IsForeignKey = false;
				colvarMaLanKham.IsReadOnly = false;
				colvarMaLanKham.DefaultSetting = @"";
				colvarMaLanKham.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaLanKham);
				
				TableSchema.TableColumn colvarIdChiTietChiDinh = new TableSchema.TableColumn(schema);
				colvarIdChiTietChiDinh.ColumnName = "IdChiTietChiDinh";
				colvarIdChiTietChiDinh.DataType = DbType.Int64;
				colvarIdChiTietChiDinh.MaxLength = 0;
				colvarIdChiTietChiDinh.AutoIncrement = false;
				colvarIdChiTietChiDinh.IsNullable = true;
				colvarIdChiTietChiDinh.IsPrimaryKey = false;
				colvarIdChiTietChiDinh.IsForeignKey = false;
				colvarIdChiTietChiDinh.IsReadOnly = false;
				colvarIdChiTietChiDinh.DefaultSetting = @"";
				colvarIdChiTietChiDinh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIdChiTietChiDinh);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("kcb_ketqua_ha",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public long Id 
		{
			get { return GetColumnValue<long>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("NameFile")]
		[Bindable(true)]
		public string NameFile 
		{
			get { return GetColumnValue<string>(Columns.NameFile); }
			set { SetColumnValue(Columns.NameFile, value); }
		}
		  
		[XmlAttribute("DisplayName")]
		[Bindable(true)]
		public string DisplayName 
		{
			get { return GetColumnValue<string>(Columns.DisplayName); }
			set { SetColumnValue(Columns.DisplayName, value); }
		}
		  
		[XmlAttribute("FileData")]
		[Bindable(true)]
		public byte[] FileData 
		{
			get { return GetColumnValue<byte[]>(Columns.FileData); }
			set { SetColumnValue(Columns.FileData, value); }
		}
		  
		[XmlAttribute("FileSize")]
		[Bindable(true)]
		public long? FileSize 
		{
			get { return GetColumnValue<long?>(Columns.FileSize); }
			set { SetColumnValue(Columns.FileSize, value); }
		}
		  
		[XmlAttribute("UploadDate")]
		[Bindable(true)]
		public DateTime? UploadDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.UploadDate); }
			set { SetColumnValue(Columns.UploadDate, value); }
		}
		  
		[XmlAttribute("MaLanKham")]
		[Bindable(true)]
		public string MaLanKham 
		{
			get { return GetColumnValue<string>(Columns.MaLanKham); }
			set { SetColumnValue(Columns.MaLanKham, value); }
		}
		  
		[XmlAttribute("IdChiTietChiDinh")]
		[Bindable(true)]
		public long? IdChiTietChiDinh 
		{
			get { return GetColumnValue<long?>(Columns.IdChiTietChiDinh); }
			set { SetColumnValue(Columns.IdChiTietChiDinh, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varNameFile,string varDisplayName,byte[] varFileData,long? varFileSize,DateTime? varUploadDate,string varMaLanKham,long? varIdChiTietChiDinh)
		{
			KcbKetquaHa item = new KcbKetquaHa();
			
			item.NameFile = varNameFile;
			
			item.DisplayName = varDisplayName;
			
			item.FileData = varFileData;
			
			item.FileSize = varFileSize;
			
			item.UploadDate = varUploadDate;
			
			item.MaLanKham = varMaLanKham;
			
			item.IdChiTietChiDinh = varIdChiTietChiDinh;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(long varId,string varNameFile,string varDisplayName,byte[] varFileData,long? varFileSize,DateTime? varUploadDate,string varMaLanKham,long? varIdChiTietChiDinh)
		{
			KcbKetquaHa item = new KcbKetquaHa();
			
				item.Id = varId;
			
				item.NameFile = varNameFile;
			
				item.DisplayName = varDisplayName;
			
				item.FileData = varFileData;
			
				item.FileSize = varFileSize;
			
				item.UploadDate = varUploadDate;
			
				item.MaLanKham = varMaLanKham;
			
				item.IdChiTietChiDinh = varIdChiTietChiDinh;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn NameFileColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn DisplayNameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn FileDataColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn FileSizeColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn UploadDateColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn MaLanKhamColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn IdChiTietChiDinhColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"Id";
			 public static string NameFile = @"NameFile";
			 public static string DisplayName = @"DisplayName";
			 public static string FileData = @"FileData";
			 public static string FileSize = @"FileSize";
			 public static string UploadDate = @"UploadDate";
			 public static string MaLanKham = @"MaLanKham";
			 public static string IdChiTietChiDinh = @"IdChiTietChiDinh";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
