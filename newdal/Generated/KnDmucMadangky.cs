using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VNS.HIS.DAL
{
	/// <summary>
	/// Strongly-typed collection for the KnDmucMadangky class.
	/// </summary>
    [Serializable]
	public partial class KnDmucMadangkyCollection : ActiveList<KnDmucMadangky, KnDmucMadangkyCollection>
	{	   
		public KnDmucMadangkyCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>KnDmucMadangkyCollection</returns>
		public KnDmucMadangkyCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                KnDmucMadangky o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the kn_dmuc_madangky table.
	/// </summary>
	[Serializable]
	public partial class KnDmucMadangky : ActiveRecord<KnDmucMadangky>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public KnDmucMadangky()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public KnDmucMadangky(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public KnDmucMadangky(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public KnDmucMadangky(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("kn_dmuc_madangky", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarStt = new TableSchema.TableColumn(schema);
				colvarStt.ColumnName = "STT";
				colvarStt.DataType = DbType.Int32;
				colvarStt.MaxLength = 0;
				colvarStt.AutoIncrement = false;
				colvarStt.IsNullable = false;
				colvarStt.IsPrimaryKey = false;
				colvarStt.IsForeignKey = false;
				colvarStt.IsReadOnly = false;
				colvarStt.DefaultSetting = @"";
				colvarStt.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStt);
				
				TableSchema.TableColumn colvarMaDangky = new TableSchema.TableColumn(schema);
				colvarMaDangky.ColumnName = "ma_dangky";
				colvarMaDangky.DataType = DbType.String;
				colvarMaDangky.MaxLength = 10;
				colvarMaDangky.AutoIncrement = false;
				colvarMaDangky.IsNullable = false;
				colvarMaDangky.IsPrimaryKey = true;
				colvarMaDangky.IsForeignKey = false;
				colvarMaDangky.IsReadOnly = false;
				colvarMaDangky.DefaultSetting = @"";
				colvarMaDangky.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMaDangky);
				
				TableSchema.TableColumn colvarNam = new TableSchema.TableColumn(schema);
				colvarNam.ColumnName = "nam";
				colvarNam.DataType = DbType.Int16;
				colvarNam.MaxLength = 0;
				colvarNam.AutoIncrement = false;
				colvarNam.IsNullable = false;
				colvarNam.IsPrimaryKey = true;
				colvarNam.IsForeignKey = false;
				colvarNam.IsReadOnly = false;
				colvarNam.DefaultSetting = @"";
				colvarNam.ForeignKeyTableName = "";
				schema.Columns.Add(colvarNam);
				
				TableSchema.TableColumn colvarTrangThai = new TableSchema.TableColumn(schema);
				colvarTrangThai.ColumnName = "trang_thai";
				colvarTrangThai.DataType = DbType.Byte;
				colvarTrangThai.MaxLength = 0;
				colvarTrangThai.AutoIncrement = false;
				colvarTrangThai.IsNullable = false;
				colvarTrangThai.IsPrimaryKey = false;
				colvarTrangThai.IsForeignKey = false;
				colvarTrangThai.IsReadOnly = false;
				colvarTrangThai.DefaultSetting = @"";
				colvarTrangThai.ForeignKeyTableName = "";
				schema.Columns.Add(colvarTrangThai);
				
				TableSchema.TableColumn colvarLoai = new TableSchema.TableColumn(schema);
				colvarLoai.ColumnName = "loai";
				colvarLoai.DataType = DbType.Byte;
				colvarLoai.MaxLength = 0;
				colvarLoai.AutoIncrement = false;
				colvarLoai.IsNullable = false;
				colvarLoai.IsPrimaryKey = true;
				colvarLoai.IsForeignKey = false;
				colvarLoai.IsReadOnly = false;
				colvarLoai.DefaultSetting = @"";
				colvarLoai.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLoai);
				
				TableSchema.TableColumn colvarUsedBy = new TableSchema.TableColumn(schema);
				colvarUsedBy.ColumnName = "used_by";
				colvarUsedBy.DataType = DbType.String;
				colvarUsedBy.MaxLength = 30;
				colvarUsedBy.AutoIncrement = false;
				colvarUsedBy.IsNullable = true;
				colvarUsedBy.IsPrimaryKey = false;
				colvarUsedBy.IsForeignKey = false;
				colvarUsedBy.IsReadOnly = false;
				colvarUsedBy.DefaultSetting = @"";
				colvarUsedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUsedBy);
				
				TableSchema.TableColumn colvarStartTime = new TableSchema.TableColumn(schema);
				colvarStartTime.ColumnName = "start_time";
				colvarStartTime.DataType = DbType.DateTime;
				colvarStartTime.MaxLength = 0;
				colvarStartTime.AutoIncrement = false;
				colvarStartTime.IsNullable = true;
				colvarStartTime.IsPrimaryKey = false;
				colvarStartTime.IsForeignKey = false;
				colvarStartTime.IsReadOnly = false;
				colvarStartTime.DefaultSetting = @"";
				colvarStartTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStartTime);
				
				TableSchema.TableColumn colvarEndTime = new TableSchema.TableColumn(schema);
				colvarEndTime.ColumnName = "end_time";
				colvarEndTime.DataType = DbType.DateTime;
				colvarEndTime.MaxLength = 0;
				colvarEndTime.AutoIncrement = false;
				colvarEndTime.IsNullable = true;
				colvarEndTime.IsPrimaryKey = false;
				colvarEndTime.IsForeignKey = false;
				colvarEndTime.IsReadOnly = false;
				colvarEndTime.DefaultSetting = @"";
				colvarEndTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEndTime);
				
				TableSchema.TableColumn colvarUnlockBy = new TableSchema.TableColumn(schema);
				colvarUnlockBy.ColumnName = "unlock_by";
				colvarUnlockBy.DataType = DbType.String;
				colvarUnlockBy.MaxLength = 30;
				colvarUnlockBy.AutoIncrement = false;
				colvarUnlockBy.IsNullable = true;
				colvarUnlockBy.IsPrimaryKey = false;
				colvarUnlockBy.IsForeignKey = false;
				colvarUnlockBy.IsReadOnly = false;
				colvarUnlockBy.DefaultSetting = @"";
				colvarUnlockBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnlockBy);
				
				TableSchema.TableColumn colvarUnlockTime = new TableSchema.TableColumn(schema);
				colvarUnlockTime.ColumnName = "unlock_time";
				colvarUnlockTime.DataType = DbType.DateTime;
				colvarUnlockTime.MaxLength = 0;
				colvarUnlockTime.AutoIncrement = false;
				colvarUnlockTime.IsNullable = true;
				colvarUnlockTime.IsPrimaryKey = false;
				colvarUnlockTime.IsForeignKey = false;
				colvarUnlockTime.IsReadOnly = false;
				colvarUnlockTime.DefaultSetting = @"";
				colvarUnlockTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUnlockTime);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("kn_dmuc_madangky",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Stt")]
		[Bindable(true)]
		public int Stt 
		{
			get { return GetColumnValue<int>(Columns.Stt); }
			set { SetColumnValue(Columns.Stt, value); }
		}
		  
		[XmlAttribute("MaDangky")]
		[Bindable(true)]
		public string MaDangky 
		{
			get { return GetColumnValue<string>(Columns.MaDangky); }
			set { SetColumnValue(Columns.MaDangky, value); }
		}
		  
		[XmlAttribute("Nam")]
		[Bindable(true)]
		public short Nam 
		{
			get { return GetColumnValue<short>(Columns.Nam); }
			set { SetColumnValue(Columns.Nam, value); }
		}
		  
		[XmlAttribute("TrangThai")]
		[Bindable(true)]
		public byte TrangThai 
		{
			get { return GetColumnValue<byte>(Columns.TrangThai); }
			set { SetColumnValue(Columns.TrangThai, value); }
		}
		  
		[XmlAttribute("Loai")]
		[Bindable(true)]
		public byte Loai 
		{
			get { return GetColumnValue<byte>(Columns.Loai); }
			set { SetColumnValue(Columns.Loai, value); }
		}
		  
		[XmlAttribute("UsedBy")]
		[Bindable(true)]
		public string UsedBy 
		{
			get { return GetColumnValue<string>(Columns.UsedBy); }
			set { SetColumnValue(Columns.UsedBy, value); }
		}
		  
		[XmlAttribute("StartTime")]
		[Bindable(true)]
		public DateTime? StartTime 
		{
			get { return GetColumnValue<DateTime?>(Columns.StartTime); }
			set { SetColumnValue(Columns.StartTime, value); }
		}
		  
		[XmlAttribute("EndTime")]
		[Bindable(true)]
		public DateTime? EndTime 
		{
			get { return GetColumnValue<DateTime?>(Columns.EndTime); }
			set { SetColumnValue(Columns.EndTime, value); }
		}
		  
		[XmlAttribute("UnlockBy")]
		[Bindable(true)]
		public string UnlockBy 
		{
			get { return GetColumnValue<string>(Columns.UnlockBy); }
			set { SetColumnValue(Columns.UnlockBy, value); }
		}
		  
		[XmlAttribute("UnlockTime")]
		[Bindable(true)]
		public DateTime? UnlockTime 
		{
			get { return GetColumnValue<DateTime?>(Columns.UnlockTime); }
			set { SetColumnValue(Columns.UnlockTime, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varStt,string varMaDangky,short varNam,byte varTrangThai,byte varLoai,string varUsedBy,DateTime? varStartTime,DateTime? varEndTime,string varUnlockBy,DateTime? varUnlockTime)
		{
			KnDmucMadangky item = new KnDmucMadangky();
			
			item.Stt = varStt;
			
			item.MaDangky = varMaDangky;
			
			item.Nam = varNam;
			
			item.TrangThai = varTrangThai;
			
			item.Loai = varLoai;
			
			item.UsedBy = varUsedBy;
			
			item.StartTime = varStartTime;
			
			item.EndTime = varEndTime;
			
			item.UnlockBy = varUnlockBy;
			
			item.UnlockTime = varUnlockTime;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varStt,string varMaDangky,short varNam,byte varTrangThai,byte varLoai,string varUsedBy,DateTime? varStartTime,DateTime? varEndTime,string varUnlockBy,DateTime? varUnlockTime)
		{
			KnDmucMadangky item = new KnDmucMadangky();
			
				item.Stt = varStt;
			
				item.MaDangky = varMaDangky;
			
				item.Nam = varNam;
			
				item.TrangThai = varTrangThai;
			
				item.Loai = varLoai;
			
				item.UsedBy = varUsedBy;
			
				item.StartTime = varStartTime;
			
				item.EndTime = varEndTime;
			
				item.UnlockBy = varUnlockBy;
			
				item.UnlockTime = varUnlockTime;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn SttColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn MaDangkyColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn NamColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn TrangThaiColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn LoaiColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn UsedByColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn StartTimeColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn EndTimeColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn UnlockByColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn UnlockTimeColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Stt = @"STT";
			 public static string MaDangky = @"ma_dangky";
			 public static string Nam = @"nam";
			 public static string TrangThai = @"trang_thai";
			 public static string Loai = @"loai";
			 public static string UsedBy = @"used_by";
			 public static string StartTime = @"start_time";
			 public static string EndTime = @"end_time";
			 public static string UnlockBy = @"unlock_by";
			 public static string UnlockTime = @"unlock_time";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
