using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VNS.HIS.DAL
{
	/// <summary>
	/// Strongly-typed collection for the SysMessage class.
	/// </summary>
    [Serializable]
	public partial class SysMessageCollection : ActiveList<SysMessage, SysMessageCollection>
	{	   
		public SysMessageCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SysMessageCollection</returns>
		public SysMessageCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SysMessage o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the Sys_Messages table.
	/// </summary>
	[Serializable]
	public partial class SysMessage : ActiveRecord<SysMessage>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SysMessage()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SysMessage(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SysMessage(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SysMessage(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("Sys_Messages", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarMsgCode = new TableSchema.TableColumn(schema);
				colvarMsgCode.ColumnName = "Msg_Code";
				colvarMsgCode.DataType = DbType.AnsiString;
				colvarMsgCode.MaxLength = 25;
				colvarMsgCode.AutoIncrement = false;
				colvarMsgCode.IsNullable = false;
				colvarMsgCode.IsPrimaryKey = true;
				colvarMsgCode.IsForeignKey = false;
				colvarMsgCode.IsReadOnly = false;
				colvarMsgCode.DefaultSetting = @"";
				colvarMsgCode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMsgCode);
				
				TableSchema.TableColumn colvarVnMsgContent = new TableSchema.TableColumn(schema);
				colvarVnMsgContent.ColumnName = "VnMsg_Content";
				colvarVnMsgContent.DataType = DbType.String;
				colvarVnMsgContent.MaxLength = 200;
				colvarVnMsgContent.AutoIncrement = false;
				colvarVnMsgContent.IsNullable = false;
				colvarVnMsgContent.IsPrimaryKey = false;
				colvarVnMsgContent.IsForeignKey = false;
				colvarVnMsgContent.IsReadOnly = false;
				colvarVnMsgContent.DefaultSetting = @"";
				colvarVnMsgContent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVnMsgContent);
				
				TableSchema.TableColumn colvarEnMsgContent = new TableSchema.TableColumn(schema);
				colvarEnMsgContent.ColumnName = "EnMsg_Content";
				colvarEnMsgContent.DataType = DbType.String;
				colvarEnMsgContent.MaxLength = 200;
				colvarEnMsgContent.AutoIncrement = false;
				colvarEnMsgContent.IsNullable = false;
				colvarEnMsgContent.IsPrimaryKey = false;
				colvarEnMsgContent.IsForeignKey = false;
				colvarEnMsgContent.IsReadOnly = false;
				colvarEnMsgContent.DefaultSetting = @"";
				colvarEnMsgContent.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEnMsgContent);
				
				TableSchema.TableColumn colvarVnMsgTitle = new TableSchema.TableColumn(schema);
				colvarVnMsgTitle.ColumnName = "VnMsg_Title";
				colvarVnMsgTitle.DataType = DbType.String;
				colvarVnMsgTitle.MaxLength = 100;
				colvarVnMsgTitle.AutoIncrement = false;
				colvarVnMsgTitle.IsNullable = false;
				colvarVnMsgTitle.IsPrimaryKey = false;
				colvarVnMsgTitle.IsForeignKey = false;
				colvarVnMsgTitle.IsReadOnly = false;
				colvarVnMsgTitle.DefaultSetting = @"";
				colvarVnMsgTitle.ForeignKeyTableName = "";
				schema.Columns.Add(colvarVnMsgTitle);
				
				TableSchema.TableColumn colvarEnMsgTitle = new TableSchema.TableColumn(schema);
				colvarEnMsgTitle.ColumnName = "EnMsg_Title";
				colvarEnMsgTitle.DataType = DbType.String;
				colvarEnMsgTitle.MaxLength = 100;
				colvarEnMsgTitle.AutoIncrement = false;
				colvarEnMsgTitle.IsNullable = false;
				colvarEnMsgTitle.IsPrimaryKey = false;
				colvarEnMsgTitle.IsForeignKey = false;
				colvarEnMsgTitle.IsReadOnly = false;
				colvarEnMsgTitle.DefaultSetting = @"";
				colvarEnMsgTitle.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEnMsgTitle);
				
				TableSchema.TableColumn colvarMsgType = new TableSchema.TableColumn(schema);
				colvarMsgType.ColumnName = "Msg_Type";
				colvarMsgType.DataType = DbType.AnsiString;
				colvarMsgType.MaxLength = 4;
				colvarMsgType.AutoIncrement = false;
				colvarMsgType.IsNullable = false;
				colvarMsgType.IsPrimaryKey = false;
				colvarMsgType.IsForeignKey = false;
				colvarMsgType.IsReadOnly = false;
				colvarMsgType.DefaultSetting = @"";
				colvarMsgType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMsgType);
				
				TableSchema.TableColumn colvarActionType = new TableSchema.TableColumn(schema);
				colvarActionType.ColumnName = "Action_Type";
				colvarActionType.DataType = DbType.AnsiString;
				colvarActionType.MaxLength = 1;
				colvarActionType.AutoIncrement = false;
				colvarActionType.IsNullable = false;
				colvarActionType.IsPrimaryKey = false;
				colvarActionType.IsForeignKey = false;
				colvarActionType.IsReadOnly = false;
				colvarActionType.DefaultSetting = @"";
				colvarActionType.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActionType);
				
				TableSchema.TableColumn colvarSubsystemId = new TableSchema.TableColumn(schema);
				colvarSubsystemId.ColumnName = "Subsystem_ID";
				colvarSubsystemId.DataType = DbType.Int16;
				colvarSubsystemId.MaxLength = 0;
				colvarSubsystemId.AutoIncrement = false;
				colvarSubsystemId.IsNullable = false;
				colvarSubsystemId.IsPrimaryKey = false;
				colvarSubsystemId.IsForeignKey = false;
				colvarSubsystemId.IsReadOnly = false;
				colvarSubsystemId.DefaultSetting = @"";
				colvarSubsystemId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSubsystemId);
				
				TableSchema.TableColumn colvarSDesc = new TableSchema.TableColumn(schema);
				colvarSDesc.ColumnName = "sDesc";
				colvarSDesc.DataType = DbType.String;
				colvarSDesc.MaxLength = 200;
				colvarSDesc.AutoIncrement = false;
				colvarSDesc.IsNullable = true;
				colvarSDesc.IsPrimaryKey = false;
				colvarSDesc.IsForeignKey = false;
				colvarSDesc.IsReadOnly = false;
				colvarSDesc.DefaultSetting = @"";
				colvarSDesc.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSDesc);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("Sys_Messages",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("MsgCode")]
		[Bindable(true)]
		public string MsgCode 
		{
			get { return GetColumnValue<string>(Columns.MsgCode); }
			set { SetColumnValue(Columns.MsgCode, value); }
		}
		  
		[XmlAttribute("VnMsgContent")]
		[Bindable(true)]
		public string VnMsgContent 
		{
			get { return GetColumnValue<string>(Columns.VnMsgContent); }
			set { SetColumnValue(Columns.VnMsgContent, value); }
		}
		  
		[XmlAttribute("EnMsgContent")]
		[Bindable(true)]
		public string EnMsgContent 
		{
			get { return GetColumnValue<string>(Columns.EnMsgContent); }
			set { SetColumnValue(Columns.EnMsgContent, value); }
		}
		  
		[XmlAttribute("VnMsgTitle")]
		[Bindable(true)]
		public string VnMsgTitle 
		{
			get { return GetColumnValue<string>(Columns.VnMsgTitle); }
			set { SetColumnValue(Columns.VnMsgTitle, value); }
		}
		  
		[XmlAttribute("EnMsgTitle")]
		[Bindable(true)]
		public string EnMsgTitle 
		{
			get { return GetColumnValue<string>(Columns.EnMsgTitle); }
			set { SetColumnValue(Columns.EnMsgTitle, value); }
		}
		  
		[XmlAttribute("MsgType")]
		[Bindable(true)]
		public string MsgType 
		{
			get { return GetColumnValue<string>(Columns.MsgType); }
			set { SetColumnValue(Columns.MsgType, value); }
		}
		  
		[XmlAttribute("ActionType")]
		[Bindable(true)]
		public string ActionType 
		{
			get { return GetColumnValue<string>(Columns.ActionType); }
			set { SetColumnValue(Columns.ActionType, value); }
		}
		  
		[XmlAttribute("SubsystemId")]
		[Bindable(true)]
		public short SubsystemId 
		{
			get { return GetColumnValue<short>(Columns.SubsystemId); }
			set { SetColumnValue(Columns.SubsystemId, value); }
		}
		  
		[XmlAttribute("SDesc")]
		[Bindable(true)]
		public string SDesc 
		{
			get { return GetColumnValue<string>(Columns.SDesc); }
			set { SetColumnValue(Columns.SDesc, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varMsgCode,string varVnMsgContent,string varEnMsgContent,string varVnMsgTitle,string varEnMsgTitle,string varMsgType,string varActionType,short varSubsystemId,string varSDesc)
		{
			SysMessage item = new SysMessage();
			
			item.MsgCode = varMsgCode;
			
			item.VnMsgContent = varVnMsgContent;
			
			item.EnMsgContent = varEnMsgContent;
			
			item.VnMsgTitle = varVnMsgTitle;
			
			item.EnMsgTitle = varEnMsgTitle;
			
			item.MsgType = varMsgType;
			
			item.ActionType = varActionType;
			
			item.SubsystemId = varSubsystemId;
			
			item.SDesc = varSDesc;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varMsgCode,string varVnMsgContent,string varEnMsgContent,string varVnMsgTitle,string varEnMsgTitle,string varMsgType,string varActionType,short varSubsystemId,string varSDesc)
		{
			SysMessage item = new SysMessage();
			
				item.MsgCode = varMsgCode;
			
				item.VnMsgContent = varVnMsgContent;
			
				item.EnMsgContent = varEnMsgContent;
			
				item.VnMsgTitle = varVnMsgTitle;
			
				item.EnMsgTitle = varEnMsgTitle;
			
				item.MsgType = varMsgType;
			
				item.ActionType = varActionType;
			
				item.SubsystemId = varSubsystemId;
			
				item.SDesc = varSDesc;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn MsgCodeColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn VnMsgContentColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn EnMsgContentColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn VnMsgTitleColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn EnMsgTitleColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn MsgTypeColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn ActionTypeColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn SubsystemIdColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn SDescColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string MsgCode = @"Msg_Code";
			 public static string VnMsgContent = @"VnMsg_Content";
			 public static string EnMsgContent = @"EnMsg_Content";
			 public static string VnMsgTitle = @"VnMsg_Title";
			 public static string EnMsgTitle = @"EnMsg_Title";
			 public static string MsgType = @"Msg_Type";
			 public static string ActionType = @"Action_Type";
			 public static string SubsystemId = @"Subsystem_ID";
			 public static string SDesc = @"sDesc";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
