using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace VNS.HIS.DAL
{
	/// <summary>
	/// Strongly-typed collection for the SysUserPrinter class.
	/// </summary>
    [Serializable]
	public partial class SysUserPrinterCollection : ActiveList<SysUserPrinter, SysUserPrinterCollection>
	{	   
		public SysUserPrinterCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SysUserPrinterCollection</returns>
		public SysUserPrinterCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SysUserPrinter o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the SysUserPrinter table.
	/// </summary>
	[Serializable]
	public partial class SysUserPrinter : ActiveRecord<SysUserPrinter>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SysUserPrinter()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SysUserPrinter(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SysUserPrinter(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SysUserPrinter(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("SysUserPrinter", TableType.Table, DataService.GetInstance("ORM"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarSysUserName = new TableSchema.TableColumn(schema);
				colvarSysUserName.ColumnName = "Sys_UserName";
				colvarSysUserName.DataType = DbType.String;
				colvarSysUserName.MaxLength = 50;
				colvarSysUserName.AutoIncrement = false;
				colvarSysUserName.IsNullable = false;
				colvarSysUserName.IsPrimaryKey = true;
				colvarSysUserName.IsForeignKey = false;
				colvarSysUserName.IsReadOnly = false;
				colvarSysUserName.DefaultSetting = @"";
				colvarSysUserName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSysUserName);
				
				TableSchema.TableColumn colvarPagerCopy = new TableSchema.TableColumn(schema);
				colvarPagerCopy.ColumnName = "PagerCopy";
				colvarPagerCopy.DataType = DbType.Int32;
				colvarPagerCopy.MaxLength = 0;
				colvarPagerCopy.AutoIncrement = false;
				colvarPagerCopy.IsNullable = true;
				colvarPagerCopy.IsPrimaryKey = false;
				colvarPagerCopy.IsForeignKey = false;
				colvarPagerCopy.IsReadOnly = false;
				colvarPagerCopy.DefaultSetting = @"";
				colvarPagerCopy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPagerCopy);
				
				TableSchema.TableColumn colvarPrinterName = new TableSchema.TableColumn(schema);
				colvarPrinterName.ColumnName = "Printer_Name";
				colvarPrinterName.DataType = DbType.String;
				colvarPrinterName.MaxLength = 50;
				colvarPrinterName.AutoIncrement = false;
				colvarPrinterName.IsNullable = true;
				colvarPrinterName.IsPrimaryKey = false;
				colvarPrinterName.IsForeignKey = false;
				colvarPrinterName.IsReadOnly = false;
				colvarPrinterName.DefaultSetting = @"";
				colvarPrinterName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrinterName);
				
				TableSchema.TableColumn colvarAccountName = new TableSchema.TableColumn(schema);
				colvarAccountName.ColumnName = "AccountName";
				colvarAccountName.DataType = DbType.String;
				colvarAccountName.MaxLength = 50;
				colvarAccountName.AutoIncrement = false;
				colvarAccountName.IsNullable = true;
				colvarAccountName.IsPrimaryKey = false;
				colvarAccountName.IsForeignKey = false;
				colvarAccountName.IsReadOnly = false;
				colvarAccountName.DefaultSetting = @"";
				colvarAccountName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountName);
				
				TableSchema.TableColumn colvarCreatedBy = new TableSchema.TableColumn(schema);
				colvarCreatedBy.ColumnName = "CreatedBy";
				colvarCreatedBy.DataType = DbType.String;
				colvarCreatedBy.MaxLength = 50;
				colvarCreatedBy.AutoIncrement = false;
				colvarCreatedBy.IsNullable = true;
				colvarCreatedBy.IsPrimaryKey = false;
				colvarCreatedBy.IsForeignKey = false;
				colvarCreatedBy.IsReadOnly = false;
				colvarCreatedBy.DefaultSetting = @"";
				colvarCreatedBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCreatedBy);
				
				TableSchema.TableColumn colvarInsuranceBy = new TableSchema.TableColumn(schema);
				colvarInsuranceBy.ColumnName = "InsuranceBy";
				colvarInsuranceBy.DataType = DbType.String;
				colvarInsuranceBy.MaxLength = 50;
				colvarInsuranceBy.AutoIncrement = false;
				colvarInsuranceBy.IsNullable = true;
				colvarInsuranceBy.IsPrimaryKey = false;
				colvarInsuranceBy.IsForeignKey = false;
				colvarInsuranceBy.IsReadOnly = false;
				colvarInsuranceBy.DefaultSetting = @"";
				colvarInsuranceBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarInsuranceBy);
				
				TableSchema.TableColumn colvarHospitalBy = new TableSchema.TableColumn(schema);
				colvarHospitalBy.ColumnName = "HospitalBy";
				colvarHospitalBy.DataType = DbType.String;
				colvarHospitalBy.MaxLength = 50;
				colvarHospitalBy.AutoIncrement = false;
				colvarHospitalBy.IsNullable = true;
				colvarHospitalBy.IsPrimaryKey = false;
				colvarHospitalBy.IsForeignKey = false;
				colvarHospitalBy.IsReadOnly = false;
				colvarHospitalBy.DefaultSetting = @"";
				colvarHospitalBy.ForeignKeyTableName = "";
				schema.Columns.Add(colvarHospitalBy);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ORM"].AddSchema("SysUserPrinter",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("SysUserName")]
		[Bindable(true)]
		public string SysUserName 
		{
			get { return GetColumnValue<string>(Columns.SysUserName); }
			set { SetColumnValue(Columns.SysUserName, value); }
		}
		  
		[XmlAttribute("PagerCopy")]
		[Bindable(true)]
		public int? PagerCopy 
		{
			get { return GetColumnValue<int?>(Columns.PagerCopy); }
			set { SetColumnValue(Columns.PagerCopy, value); }
		}
		  
		[XmlAttribute("PrinterName")]
		[Bindable(true)]
		public string PrinterName 
		{
			get { return GetColumnValue<string>(Columns.PrinterName); }
			set { SetColumnValue(Columns.PrinterName, value); }
		}
		  
		[XmlAttribute("AccountName")]
		[Bindable(true)]
		public string AccountName 
		{
			get { return GetColumnValue<string>(Columns.AccountName); }
			set { SetColumnValue(Columns.AccountName, value); }
		}
		  
		[XmlAttribute("CreatedBy")]
		[Bindable(true)]
		public string CreatedBy 
		{
			get { return GetColumnValue<string>(Columns.CreatedBy); }
			set { SetColumnValue(Columns.CreatedBy, value); }
		}
		  
		[XmlAttribute("InsuranceBy")]
		[Bindable(true)]
		public string InsuranceBy 
		{
			get { return GetColumnValue<string>(Columns.InsuranceBy); }
			set { SetColumnValue(Columns.InsuranceBy, value); }
		}
		  
		[XmlAttribute("HospitalBy")]
		[Bindable(true)]
		public string HospitalBy 
		{
			get { return GetColumnValue<string>(Columns.HospitalBy); }
			set { SetColumnValue(Columns.HospitalBy, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varSysUserName,int? varPagerCopy,string varPrinterName,string varAccountName,string varCreatedBy,string varInsuranceBy,string varHospitalBy)
		{
			SysUserPrinter item = new SysUserPrinter();
			
			item.SysUserName = varSysUserName;
			
			item.PagerCopy = varPagerCopy;
			
			item.PrinterName = varPrinterName;
			
			item.AccountName = varAccountName;
			
			item.CreatedBy = varCreatedBy;
			
			item.InsuranceBy = varInsuranceBy;
			
			item.HospitalBy = varHospitalBy;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(string varSysUserName,int? varPagerCopy,string varPrinterName,string varAccountName,string varCreatedBy,string varInsuranceBy,string varHospitalBy)
		{
			SysUserPrinter item = new SysUserPrinter();
			
				item.SysUserName = varSysUserName;
			
				item.PagerCopy = varPagerCopy;
			
				item.PrinterName = varPrinterName;
			
				item.AccountName = varAccountName;
			
				item.CreatedBy = varCreatedBy;
			
				item.InsuranceBy = varInsuranceBy;
			
				item.HospitalBy = varHospitalBy;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn SysUserNameColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn PagerCopyColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn PrinterNameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn AccountNameColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CreatedByColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn InsuranceByColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn HospitalByColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string SysUserName = @"Sys_UserName";
			 public static string PagerCopy = @"PagerCopy";
			 public static string PrinterName = @"Printer_Name";
			 public static string AccountName = @"AccountName";
			 public static string CreatedBy = @"CreatedBy";
			 public static string InsuranceBy = @"InsuranceBy";
			 public static string HospitalBy = @"HospitalBy";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
